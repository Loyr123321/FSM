@page "/sendregister"
@using BlazorApp1.Auth;
@using BlazorApp1.Models.Validation;
@using BlazorApp1.Models;
@using BlazorApp1.Services;
@using BlazorApp1.Utils;
@using FluentValidation;
@using Radzen;
@*@attribute [Authorize(Policy = "RequireRole")]*@
@attribute [Authorize(Roles = "Admin")]

@inject ISnackbar Snackbar
@inject MailService mailService
@inject Services.UserService userService

<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">

<EditForm Model="@newUser" OnValidSubmit="@SendMail">
    <Blazored.FluentValidation.FluentValidationValidator></Blazored.FluentValidation.FluentValidationValidator>
    <div class="row d-flex justify-content-center">
        <div class="col-12 col-xs-12 col-md-6 my_form">
            <h3>Создать учетную запись</h3>

            <div class="row" style="margin-top: 10px;">
                <div class="col-12">
                    <label>Логин (Почта):</label>
                    <InputText @bind-Value=newUser.LoginMail class="form-control form_input_plnd" style="width:100%;" />
                    <ValidationMessage For="() => newUser.LoginMail" />
                </div>

                <div class="col-12">
                    <label>Роли:</label>
                    <RadzenDropDown @bind-Value=@newUser.Roles Data=@roles Multiple=true AllowClear=true Placeholder="Выберите роли" Style="width: 100%;" />
                    <ValidationMessage For="() => newUser.Roles" />
                </div>

                <div class="col-12" style="margin-top:10px;">
                    <div style="float: right; text-align: right;">
                        <MudButton Disabled="@_processing" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="button_saveChange" ButtonType="MudBlazor.ButtonType.Submit">
                            <MudText Class="button_saveChange_text">Отправить</MudText>
                        </MudButton>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code
{
    private List<string> roles = new(Utils.ROLES);

    public UserRegisterView newUser = new UserRegisterView();

    private bool _processing = false;
    private void ShowNotification(MudBlazor.Severity severity, string text)
    {
        Snackbar.Clear();
        Snackbar.Add(text, severity);
    }
    private async Task SendMail()
    {
        try
        {
            _processing = true; await Task.Delay(1);
            newUser.Trim();

            var checkMail = userService.GetUserByEmail(newUser.LoginMail);
            if (checkMail != null)
            {
                ShowNotification(MudBlazor.Severity.Warning, "Пользователь с таким Email уже существует");
                return;
            }

            var token = AuthOptions.CreateRegisterJWT(newUser.LoginMail, newUser.Roles.ToList());
            string url = UploadPath.BaseUrl + "/register?token=" + token;
            mailService.SendMail(To: newUser.LoginMail, Subject: "FSM_Регистрация", url);
            ShowNotification(MudBlazor.Severity.Normal, "Инструкция для регистрации отправлена на почту " + newUser.LoginMail);
        }
        catch (Exception ex)
        {
            ShowNotification(MudBlazor.Severity.Error, "Ошибка отправки данных");
            Console.WriteLine("SendMail_Exception: " + ex.Message);
            return;
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }
}
