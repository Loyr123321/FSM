@page "/account"
@*@attribute [Authorize(Policy = "RequireRole")]*@
@attribute [Authorize]

@using BlazorApp1.Auth;
@using BlazorApp1.Models;
@using BlazorApp1.Services;
@using System.Security.Claims;
@using BlazorApp1.Utils;
@inject UserService userService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject MailService mailService

<div class="row d-flex justify-content-center">
    <div class="col-6">
        <div class="row">
            <div class="col-6">
                <div>
                    <h3>@authenticationStateTask?.Result?.User?.Identity?.Name</h3>
                    <h3>@authenticationStateTask?.Result?.User?.Claims?.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value</h3>
                </div>


                <div>
                    Назначенные роли:
                    @foreach (var role in authenticationStateTask?.Result?.User?.Claims?.Where(t => t.Type == System.Security.Claims.ClaimTypes.Role))
                    {
                        @role?.Value <text>&nbsp;</text>
                    }
                </div>



            </div>
            <div class="col-6">
                <div class="get_client_info" @onclick="(e=> LogOut() )">Выход</div>
                <div class="get_client_info" @onclick="(e=> NaviageToChangeUser() )">Редактировать профиль</div>
                <div class="get_client_info" @onclick="(e=> NavigateToChangePass() )">Изменить пароль</div>
                <div class="get_client_info" @onclick="(e=> OpenResetPassDialog() )">Сбросить пароль</div>
            </div>
        </div>
    </div>
</div>


@code
{
    private bool _processing = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public void LogOut()
    {
        navigationManager.NavigateTo("/logout", true);
    }
    public void NaviageToChangeUser()
    {
        //Id смого юзера
        var myid = authenticationStateTask?.Result?.User?.Claims?.Where(t => t.Type == "UserId")?.FirstOrDefault()?.Value;

        if (!string.IsNullOrEmpty(myid))
        {
            navigationManager.NavigateTo("/changeuser?id=" + myid, true);
        }
    }
    public void NavigateToChangePass()
    {
        //Id смого юзера
        var myid = authenticationStateTask?.Result?.User?.Claims?.Where(t => t.Type == "UserId")?.FirstOrDefault()?.Value;

        if (!string.IsNullOrEmpty(myid))
        {
            navigationManager.NavigateTo("/changepass?id=" + myid, true);
        }
    }
    public async Task OpenResetPassDialog()
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Components.Dialog>("Сбросить пароль?", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                var mail = authenticationStateTask?.Result?.User?.Claims?.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
                if (mail == null)
                {
                    ShowNotification(MudBlazor.Severity.Error, "Не удалось получить Email учетной записи");
                    return;
                }

                var resetPasstoken = AuthOptions.CreateResetPassJWT(mail);
                string url = UploadPath.BaseUrl + "/resetpass?token=" + resetPasstoken;
                mailService.SendMail(To: mail, Subject: "FSM_СбросПароля", url);
                ShowNotification(MudBlazor.Severity.Normal, "Инструкция для сброса пароля отправлена на почту " + mail);
            }
            catch (Exception ex)
            {
                Console.WriteLine("OpenResetPassDialog_Exception: " + ex.Message);
                ShowNotification(MudBlazor.Severity.Error, "Ошибка отправки");
                return;
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
    }

    private void ShowNotification(Severity severity, string text)
    {
        Snackbar.Clear();
        Snackbar.Add(text, severity);
    }
}
