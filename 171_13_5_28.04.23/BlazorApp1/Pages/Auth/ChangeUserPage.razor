@page "/changeuser"
@attribute [Authorize(Policy = "RequireRole")]
@using BlazorApp1.Auth;
@using BlazorApp1.Models
@using BlazorApp1.Services
@using BlazorApp1.Utils;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.IdentityModel.JsonWebTokens;
@using MongoDB.Driver;
@using MudBlazor.Utilities
@using Newtonsoft.Json;
@using Radzen;
@using System.Security.Claims;
@using static BlazorApp1.Utils.Utils;
@using static BlazorApp1.Auth.AuthOptions;
@inject ILoggerFactory LoggerFactory
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject UserService userService
@inject IHttpContextAccessor HttpContextAccessor
@inject MailService mailService

<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">

@if (errorCode == null && currentUser != null)
{
    <EditForm Model="@currentUserView" OnValidSubmit="@SaveView">
            @*Отключить валидацию для скрытых полей либо создать оддельный класс для редактирования*@
            <Blazored.FluentValidation.FluentValidationValidator></Blazored.FluentValidation.FluentValidationValidator>
            <ValidationSummary />
            <div class="row d-flex justify-content-center">
                <div class="col-12 col-xs-12 col-md-6 col-lg-6 my_form">
                    <div class="row">
                        <div class="col-12">
                            <div class="x_icon" @onclick="@(e=>CloseWindow())"></div>
                        </div>
                    </div>
                    <h3>Изменить пользователя</h3>
                    <div class="row" style="margin-top: 10px;">

                        @*<div class="col-md-12">
                            <label>Логин:</label>
                            <input type="text" value=@currentUserView.Email class="form-control form_input_plnd" style="width:100%;" disabled />
                        </div>*@

                        <div class="col-md-12">
                            <label>Логин:</label>
                            <InputText @bind-Value=currentUserView.Email class="form-control form_input_plnd" style="width:100%;" />
                            <ValidationMessage For="() => currentUserView.Email" />
                        </div>

                        @if (authenticationStateTask.Result?.User?.Claims?.Where(t => t.Type == System.Security.Claims.ClaimTypes.Role)?.FirstOrDefault(x => x.Value == ROLES_ENUM.Admin.ToString())?.Value != null)
                        {
                            <div class="col-12">
                                <label>Роли:</label>
                                <RadzenDropDown @bind-Value=@currentUserView.Roles Data=@roles Multiple=true AllowClear=true Placeholder="Выберите роли" Style="width: 100%;" />
                                <ValidationMessage For="() => currentUserView.Roles" />
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <label>Роли:</label>
                                <input type="text" value=@GetRolesAsString() class="form-control form_input_plnd" style="width:100%;" disabled />
                            </div>
                        }

                        <div class="col-md-12">
                            <label>Фамилия:</label>
                            <InputText @bind-Value=currentUserView.LastName class="form-control form_input_plnd" style="width:100%;" />
                            <ValidationMessage For="() => currentUserView.LastName" />
                        </div>
                        <div class="col-md-12">
                            <label>Имя:</label>
                            <InputText @bind-Value=currentUserView.FirstName class="form-control form_input_plnd" style="width:100%;" />
                            <ValidationMessage For="() => currentUserView.FirstName" />
                        </div>
                        <div class="col-md-12">
                            <label>Отчество:</label>
                            <InputText @bind-Value=currentUserView.MiddleName class="form-control form_input_plnd" style="width:100%;" />
                            <ValidationMessage For="() => currentUserView.MiddleName" />
                        </div>

                        @if (authenticationStateTask.Result?.User?.Claims?.Where(t => t.Type == System.Security.Claims.ClaimTypes.Role)?.FirstOrDefault(x => x.Value == "Admin")?.Value != null)
                        {
                            <div class="row" style="margin-top:20px;">
                                <MudCheckBox @bind-Checked="@currentUserView.IsActive" Label="Разрешено работать" Color="Color.Primary" Class="m0p0"></MudCheckBox>
                            </div>
                        }

                        <div style="float: right; text-align: right;">
                            <MudButton Disabled="@_processing" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">
                                <MudText>Сохранить</MudText>
                            </MudButton>
                        </div>

                    </div>

                </div>
            </div>
        </EditForm>
}
else
{
    @if (errorCode == null)
    {
        <div>Неверные данные для изменения пользователя</div>
    }
    else
    {
        <div>@ErrorHandling.GetErrorMessage((int)errorCode)</div>
    }

}


@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? errorCode { get; set; }

    private string GetRolesAsString()
    {
        string result = string.Empty;

        if (currentUserView.Roles != null && currentUserView.Roles.Count > 0)
        {
            foreach (var role in currentUserView.Roles)
            {
                result += role + ", ";
            }

            var index = result.LastIndexOf(", ");
            if (index >= 0)
            {
                result = result.Substring(0, index);
            }
        }


        return result;
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            //id пустой
            if (string.IsNullOrEmpty(id))
            {
                errorCode = (int)ErrorHandling.ErrorCodes.ERROR_USER_NOT_FOUND;
                return;
            }

            //Id смого юзера
            var myid = authenticationStateTask?.Result?.User?.Claims?.Where(t => t.Type == "UserId")?.FirstOrDefault()?.Value;
            //ПраваАдмина
            var adminPermission = authenticationStateTask.Result?.User?.Claims?.Where(t => t.Type == System.Security.Claims.ClaimTypes.Role)?.FirstOrDefault(x => x.Value == "Admin")?.Value;
            //Если юзер Админ или он сам
            if (
                adminPermission != null
                ||
                id == myid
            )
            {
                currentUser = userService.GetOne(id);
                currentUserView = new(currentUser);
                if (currentUser == null || currentUserView == null)
                {
                    errorCode = (int)ErrorHandling.ErrorCodes.ERROR_USER_NOT_FOUND;
                    return;
                }

                //Занулять не нужно. Поля паролей не будут выводиться
                //currentUser.Password = string.Empty;
                //currentUser.ConfirmPassword = string.Empty;

                StateHasChanged();
            }
            else
            {
                errorCode = (int)ErrorHandling.ErrorCodes.ERROR_USER_ACCESS_DENY;
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ChangeUserPage_OnInitializedAsync_Exception: " + ex.Message);
            errorCode = (int)ErrorHandling.ErrorCodes.ERROR_UNKNOWN;
            return;
        }
    }

    private UserView? currentUserView = null;
    private User? currentUser = null;
    private List<string> roles = new(Utils.ROLES);
    private bool _processing = false;
    private async Task SaveView()
    {
        try
        {
            _processing = true; await Task.Delay(1);

            currentUserView.Trim();
            currentUser.EditFromView(currentUserView);
            userService.SaveOrUpdate(currentUser);
            ShowNotification(MudBlazor.Severity.Success, "Успешно сохранено");

            //Если юзер меняет самого себя. Перелогиниться чтобы обновились Права и другие Claimы
            var myid = authenticationStateTask?.Result?.User?.Claims?.Where(t => t.Type == "UserId")?.FirstOrDefault()?.Value;
            if(id == myid)
            {
                navigationManager.NavigateTo("/logout", true);
            }
        }
        catch (MongoWriteException ex)
        {
            if (ex.WriteError.Category == ServerErrorCategory.DuplicateKey)
            {
                // обработка ошибки дубликата ключа
                ShowNotification(MudBlazor.Severity.Warning, "Пользователь с таким email уже существует");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ChangeUserPage_Save_Exception: " + ex.Message);
            ShowNotification(MudBlazor.Severity.Error, "Ошибка сохранения данных");
            return;
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private void CloseWindow()
    {
        navigationManager.NavigateTo("/users");
    }

    private void ShowNotification(MudBlazor.Severity severity, string text)
    {
        Snackbar.Clear();
        Snackbar.Add(text, severity);
    }
}
