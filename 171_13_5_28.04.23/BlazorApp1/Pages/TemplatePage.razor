@page "/template"
@attribute [Authorize(Roles = "Admin,Dispatcher")]
@*@attribute [Authorize(Policy = "RequireRole")]*@
@using BlazorApp1.Components
@using BlazorApp1.Models
@using BlazorApp1.Models.Validation;
@using BlazorApp1.Services
@using BlazorApp1.Views
@using MudBlazor.Utilities
@using System.Net.Http.Headers
@inject ILoggerFactory LoggerFactory
@inject Services.OrderTypeService orderTypeService
@inject Services.SkillService skillService
@inject Services.OrderTemplateService orderTemplateService
@inject Services.OrderService orderService
@inject DataListService dataListService
@inject Services.GeneralGridSettingsService generalGridSettingsService

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject HttpClient httpclient

@if (template != null)
{
    <div class="row" >
        <div class="col-12 col-md-9" >
            <div class="row p-2 my_form_header">
                <div class="col-6">
                    @if (string.IsNullOrWhiteSpace(id))
                    {
                        <h1>Новый шаблон</h1>
                    }
                    else
                    {
                        <h1>Шаблон: </h1>
                        <span class="template_name">@template.OrderTemplateName</span>
                    }
                </div>
                <div class="col-6" @onclick="@(e=>CloseWindow())">
                    <div class="x_icon"></div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-9">
            <EditForm Model="@template" OnValidSubmit="@Save">
                <div class="row">
                    <div class="col-md-12">
                        <label class="input_label">Название шаблона*:</label>
                        <InputText @bind-Value=template.OrderTemplateName class="form-control form_input_plnd" style="width:100%;" />
                        <ValidationMessage For="() => template.OrderTemplateName" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <label class="input_label">Тип заказа:</label>

                        <MudSelect @bind-Value="orderType" T="OrderType" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="- Без типа -"
                               Clearable="true" OnClearButtonClick="ClearOrderType">
                            @foreach (var type in orderTypes)
                            {
                                <MudSelectItem Value="@type">@type.TypeName</MudSelectItem>
                            }
                        </MudSelect>

                    </div>
                </div>

                <div class="row" style="margin-top: 10px;">
                    <div class="col-md-12">
                        <label class="input_label">Описание:</label>
                        <InputText @bind-Value=template.OrderDescription class="form-control form_input_plnd" style="width:100%;" />
                        <ValidationMessage For="() => template.OrderDescription" />
                    </div>
                </div>

                <div class="col-md-6" style="margin-top: 10px;">
                    <div class="row">
                        <div class="col-md-12">
                            <label class="input_label">Длительность:</label>
                        </div>
                        <div class="col-md-6">
                            <MudNumericField @bind-Value="template.DurationHour" Label="Часов" Variant="Variant.Text" Min="0" Max="168" />
                        </div>
                        <div class="col-md-6">
                            <MudNumericField @bind-Value="template.DurationMinute" Label="Минут" Variant="Variant.Text" Min="0" Max="59" Step="5" />
                        </div>
                    </div>
                </div>

                <div class="row" style="margin-top: 20px; margin-bottom: 10px;">
                    <div class="col-md-12">
                        <label class="input_label">Необходимые навыки:</label>
                        <MudSelect T="Skill" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="true" SelectAll="true" SelectAllText="Выбрать все"
                               @bind-Value="@selectedSkill"
                               @bind-SelectedValues="selectedSkills"
                               MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                            @foreach (var skill in skills)
                            {
                                <MudSelectItem T="Skill" Value="@skill">@skill.SkillName</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </div>

                @if(authenticationStateTask.Result.User.Claims.Where(t => t.Type == System.Security.Claims.ClaimTypes.Role).FirstOrDefault(x => x.Value == "Admin") != null)
                {
                    @*Скрыть показать технические поля*@
                    <div class="row">
                        <div class="col-12">
                            <div class="get_client_info info_fc_right technical_fields"
                         @onclick="@(()=>{
                            isShowTechnicalFields = !isShowTechnicalFields; StateHasChanged();
                            RefreshDropContainer(_fieldsDropContainer, fields);
                            RefreshDropContainer(_executoFieldsDropContainer, executorFields);
                        }
                        )">
                                @if (isShowTechnicalFields)
                                {
                                    <span>Скрыть технические поля</span>
                                }
                                else
                                {
                                    <span>Показать технические поля</span>
                                }
                            </div>
                        </div>
                    </div>
                }
               

                <h4>Поля заказа: </h4>
                <MudDropContainer @ref="_fieldsDropContainer" T="TemplateFieldView" Items="fields" ItemsSelector="@((item,dropzone) => item.TemplateField.Selector == "myselector")" ItemDropped="FieldUpdated" Class="d-flex flex-wrap flex-grow-1" ItemIsDisabled="@( (item) => true)"
                              Context="containerContext">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="false" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="TemplateFieldView" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <div class="row  align-items-center block_form">

                            <div class="col-2"></div>
                            <div class="col-8">
                                <label class="input_label">Название поля</label>
                            </div>
                            <div class="col-2"></div>

                            <div class="col-2 d-none d-sm-block col-sm-1" draggable="true">
                                <div class="img_FTDefault img_DragDrop"></div>
                            </div>
                            <div class="col-2 col-sm-1">
                                <div class="img_FTDefault img_@containerContext.TemplateField.Type"></div>
                            </div>
                            <div class="col-10  col-sm-8 z_101">
                                @switch (containerContext.TemplateField.Type)
                                {
                                    case FieldType.FTText:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: номер заявки" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;

                                    case FieldType.FTFile:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: инструкция, схема разводки" />
                                                <InputFile id="@containerContext.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, containerContext, _fieldsDropContainer, fields))" hidden multiple />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                <MudButton HtmlTag="label" Class="btn_field_download" @onclick:preventDefault="true"
                                               Variant="Variant.Filled"
                                               for="@containerContext.TemplateField.Id">
                                                    Выбрать файл
                                                </MudButton>
                                            </div>
                                        </div>
                                        break;

                                    case FieldType.FTLink:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: ссылка на документ" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                <input class="form_input_plnd z_101" @bind="@containerContext.AsString" style="width:100%;" placeholder="Ссылка" />
                                            </div>
                                        </div>
                                        break;

                                    case FieldType.FTList:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: список инструментов" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                @if (dictionaries != null)
                                                {
                                                    <MudSelect @bind-Value="@containerContext.AsDataList" T="Models.DataList" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="false" Class="m0p0">
                                                        @foreach (var d in dictionaries)
                                                        {
                                                            <MudSelectItem T="Models.DataList" Value="@d">@d.Name</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                }
                                            </div>
                                        </div>
                                        break;

                                    case FieldType.FTRuble:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: предварительная стоимость" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                <MudNumericField T="double?" @bind-value="@containerContext.AsDouble" HideSpinButtons="true" Format="F2" Variant="Variant.Outlined" Clearable="true" Margin=MudBlazor.Margin.None Class="m0p0" />
                                            </div>
                                        </div>
                                        break;

                                    case FieldType.FTDouble:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: площадь помещения (м²)" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;

                                    case FieldType.FTLong:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: серийный номер" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;

                                    case FieldType.FTDate:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: дата" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;

                                    case FieldType.FTDateTime:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: дата и время" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;

                                    default:
                                        ShowNotification(Severity.Error, "Неверный тип поля");
                                        break;
                                }
                                @if (isShowTechnicalFields)
                                {
                                    <InputText @bind-Value=containerContext.TemplateField.FieldTechnicalName class="form-control form_input_plnd" style="width:100%;" placeholder="Техническое имя поля" />
                                    <ValidationMessage For="() => containerContext.TemplateField.FieldTechnicalName" />
                                }
                            </div>
                            <div class="col-6  col-sm-1">
                                <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">

                                    <ActivatorContent>
                                        <div class="img_FTDefault img_Settings" @onclick:preventDefault="true"></div>
                                    </ActivatorContent>

                                    <ChildContent>
                                        <div class="add_filed_dropdown">
                                            <MudCheckBox @bind-Checked="@containerContext.TemplateField.Required" Label="Обязательно для заполнения" Color="Color.Primary"></MudCheckBox>
                                            <MudCheckBox @bind-Checked="@containerContext.TemplateField.IsVisibleToExecutor" Label="Видно мастеру(исполнителю)" Color="Color.Primary"></MudCheckBox>
                                        </div>
                                    </ChildContent>

                                </MudMenu>

                            </div>
                            <div class="col-6  col-sm-1">
                                <div class="img_FTDefault img_Delete" @onclick:preventDefault="true" @onclick="(e => DeleteField(containerContext.TemplateField.Id, _fieldsDropContainer, fields))"></div>
                            </div>

                        </div>

                        @if (containerContext.TemplateField.Type == FieldType.FTFile || containerContext.TemplateField.Type == FieldType.FTPhoto)
                        {
                            <div class="row">
                                <div class="col-12">
                                    @if (containerContext.AsFiles != null && containerContext.AsFiles.Count > 0)
                                    {
                                        @foreach (var file in containerContext.AsFiles)
                                        {
                                            <div class="row">
                                                @if (file != null)
                                                {
                                                    @if (file.browserFile != null) //Добавлен новый
                                                    {
                                                        <div class="col-12">
                                                            <div class="row">
                                                                <div class="col-4 input_t01text inp_fp">(@file.browserFile.Size байт)</div>
                                                                <div class="col-6 input_t01text">@file.browserFile.Name</div>
                                                                <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(containerContext, file.TFile.Name, _fieldsDropContainer, fields))"></div></div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else if (file.TFile != null) //Прочитан из бд
                                                    {
                                                        <div class="col-12">
                                                            <div class="row">
                                                                <div class="col-4 input_t01text inp_fp">(@file.TFile.Size байт)</div>
                                                                <div class="col-6 input_t01text"><a href="@file.TFile.FullPath">@file.TFile.InitialName</a></div>
                                                                <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(containerContext, file.TFile.Name, _fieldsDropContainer, fields))"></div></div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </ItemRenderer>
                </MudDropContainer>

                <MudMenu Label="Добавить новое поле" Variant="Variant.Text" FullWidth="true" StartIcon="@Icons.Filled.Add" IconColor="Color.Info" Size="Size.Large" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <MudMenuItem OnClick="@(e=>AddTextField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTText"></div>
                            </div>
                            <div class="col-10">Текст</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddFileField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTFile"></div>
                            </div>
                            <div class="col-10">Файл</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddLinkField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTLink"></div>
                            </div>
                            <div class="col-10">Ссылка</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddListField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTList"></div>
                            </div>
                            <div class="col-10">Значение из списка</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddRubleField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTRuble"></div>
                            </div>
                            <div class="col-10">Деньги</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDoubleField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDouble"></div>
                            </div>
                            <div class="col-10">Число</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddIntField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTLong"></div>
                            </div>
                            <div class="col-10">Целое число</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDateField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDate"></div>
                            </div>
                            <div class="col-10">Дата</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDateTimeField(_fieldsDropContainer, fields, FieldOwner.Creator))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDateTime"></div>
                            </div>
                            <div class="col-10">Дата и время</div>
                        </div>
                    </MudMenuItem>
                </MudMenu>

                <hr />
                <h4>Поля Мастера(Исполнителя): </h4>
                <MudDropContainer @ref="_executoFieldsDropContainer" T="TemplateFieldView" Items="executorFields" ItemsSelector="@((item,dropzone) => item.TemplateField.Selector == "myselector")" ItemDropped="ExecutorFieldUpdated" Class="d-flex flex-wrap flex-grow-1" ItemIsDisabled="@( (item) => true)"
                              Context="containerContext">
                    <ChildContent>
                        <MudPaper Class="flex-grow-1">
                            <MudList Clickable="false" Class="d-flex flex-column mud-height-full">
                                <MudDropZone T="TemplateFieldView" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <div class="row  align-items-center block_form">
                            <div class="col-2"></div><div class="col-8"><label class="input_label">Название поля</label></div><div class="col-2"></div>
                            <div class="col-2 d-none d-sm-block col-sm-1" draggable="true">
                                <div class="img_FTDefault img_DragDrop"></div>
                            </div>
                            <div class="col-2 col-sm-1">
                                <div class="img_FTDefault img_@containerContext.TemplateField.Type"></div>
                            </div>
                            <div class="col-10  col-sm-8 z_101">


                                @switch (containerContext.TemplateField.Type)
                                {
                                    case FieldType.FTPhoto:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: фото накладной" />
                                                <InputFile id="@containerContext.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, containerContext, _executoFieldsDropContainer, executorFields))" hidden multiple accept=".jpg, .jpeg, .png" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                <MudButton HtmlTag="label" Class="btn_field_download" @onclick:preventDefault="true"
                                               Variant="Variant.Filled"
                                               for="@containerContext.TemplateField.Id">
                                                    Выбрать файл
                                                </MudButton>
                                            </div>
                                        </div>
                                        break;
                                    case FieldType.FTText:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: комментарий" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    case FieldType.FTYesNo:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: мастер получил оплату" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    case FieldType.FTList:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: тип работ, Оценка" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                @if (dictionaries != null)
                                                {
                                                    <MudSelect @bind-Value="@containerContext.AsDataList" T="Models.DataList" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="false" Class="m0p0">
                                                        @foreach (var d in dictionaries)
                                                        {
                                                            <MudSelectItem T="Models.DataList" Value="@d">@d.Name</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                }
                                            </div>
                                        </div>
                                        break;
                                    case FieldType.FTFile:
                                        <div class="row">
                                            <div class="col-6">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: файл сметы" />
                                                <InputFile id="@containerContext.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, containerContext, _executoFieldsDropContainer, executorFields))" hidden />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            <div class="col-6">
                                                <MudButton HtmlTag="label" Class="btn_field_download" @onclick:preventDefault="true"
                                               Variant="Variant.Filled"
                                               for="@containerContext.TemplateField.Id">
                                                    Выбрать файл
                                                </MudButton>
                                            </div>
                                        </div>
                                        break;
                                    case FieldType.FTRuble:
                                        <div class="row">
                                            <div class="col-12">
                                                <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: итоговая стоимость" />
                                                <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                            </div>
                                            @*<div class="col-6">
                                <MudNumericField T="double" @bind-value="@context.AsDouble" HideSpinButtons="true" Format="F2" Variant="Variant.Outlined" Clearable="true" AutoFocus="true" Margin=MudBlazor.Margin.None Class="m0p0" />
                                </div>*@
                                        </div>
                                        break;
                                    case FieldType.FTDouble:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: расход кабеля (м)" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    case FieldType.FTLong:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: количество (шт.)" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    case FieldType.FTDate:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: дата следующего выезда" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    case FieldType.FTDateTime:
                                        <InputText @bind-Value=containerContext.TemplateField.FieldName class="form-control form_input_plnd" style="width:100%;" placeholder="Например: дата и время следующего выезда" />
                                        <ValidationMessage For="() => containerContext.TemplateField.FieldName" />
                                        break;
                                    default:
                                        ShowNotification(Severity.Error, "Неверный тип поля");
                                        break;
                                }

                                @if (isShowTechnicalFields)
                                {
                                    <InputText @bind-Value=containerContext.TemplateField.FieldTechnicalName class="form-control form_input_plnd" style="width:100%;" placeholder="Техническое имя поля" />
                                    <ValidationMessage For="() => containerContext.TemplateField.FieldTechnicalName" />
                                }

                            </div>
                            <div class="col-6  col-sm-1">
                                <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">

                                    <ActivatorContent>
                                        <div class="img_FTDefault img_Settings" @onclick:preventDefault="true"></div>
                                    </ActivatorContent>

                                    <ChildContent>
                                        <div class="add_filed_dropdown">
                                            <MudCheckBox @bind-Checked="@containerContext.TemplateField.Required" Label="Обязательно для заполнения" Color="Color.Primary"></MudCheckBox>
                                        </div>
                                    </ChildContent>

                                </MudMenu>
                            </div>
                            <div class="col-6  col-sm-1">
                                <div class="img_FTDefault img_Delete" @onclick:preventDefault="true" @onclick="(e => DeleteField(containerContext.TemplateField.Id, _executoFieldsDropContainer, executorFields))"></div>
                            </div>

                        </div>
                    </ItemRenderer>
                </MudDropContainer>

                <MudMenu Label="Добавить новое поле" Variant="Variant.Text" FullWidth="true" StartIcon="@Icons.Filled.Add" IconColor="Color.Info" Size="Size.Large" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" class="text1">
                    <MudMenuItem OnClick="@(e=>AddPhotoField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTPhoto"></div>
                            </div>
                            <div class="col-10">Фото</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddTextField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTText"></div>
                            </div>
                            <div class="col-10">Текст</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddYesNoField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTYesNo"></div>
                            </div>
                            <div class="col-10">Да/Нет</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddListField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTList"></div>
                            </div>
                            <div class="col-10">Значение из списка</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddFileField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTFile"></div>
                            </div>
                            <div class="col-10">Файл</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddRubleField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTRuble"></div>
                            </div>
                            <div class="col-10">Деньги</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDoubleField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDouble"></div>
                            </div>
                            <div class="col-10">Число</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddIntField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTLong"></div>
                            </div>
                            <div class="col-10">Целое число</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDateField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDate"></div>
                            </div>
                            <div class="col-10">Дата</div>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(e=>AddDateTimeField(_executoFieldsDropContainer, executorFields, FieldOwner.Executor))">
                        <div class="row">
                            <div class="col-2">
                                <div class="img_FTDefault img_FTDateTime"></div>
                            </div>
                            <div class="col-10">Дата и время</div>
                        </div>
                    </MudMenuItem>
                </MudMenu>

                <div class="row" style="margin-top:20px;">
                    <MudTooltip>
                        <ChildContent>
                            <MudCheckBox @bind-Checked="@isUpdateOldOrders" Label="Обновить поля в старых заказах" Color="Color.Error" Class="m0p0" Disabled="true"></MudCheckBox>
                        </ChildContent>
                        <TooltipContent>
                            <div class="mytooltip_div">Удаленные поля пропадут из старых заказов вместе со всеми данными,</div>
                            <div class="mytooltip_div">а новые поля, которых не было в старых заказах, будут добавлены.</div>
                            <div class="mytooltip_div">Без этой настройки, старые заказы останутся со старым шаблоном,</div>
                            <div class="mytooltip_div">а новые будут созданы по новому шаблону.</div>
                        </TooltipContent>
                    </MudTooltip>
                </div>

                <div class="row" style="margin-top:20px;">
                    <div class="col-md-12">

                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Class="button_deleteChange" OnClick="@(e=>OpenDialogDelete(template.Id, template.OrderTemplateName))">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText Class="button_saveChange_text">Удалить</MudText>
                            }
                        </MudButton>

                        <div style="float: right;">
                            <MudButton Disabled="@_processing" Variant="Variant.Filled" Class="button_discardChange" OnClick="@(e=>CloseWindow())">
                                <MudText Class="button_discardChange_text">Отменить</MudText>
                            </MudButton>
                            <MudButton Disabled="@_processing" Variant="Variant.Filled" Class="button_saveChange" ButtonType="MudBlazor.ButtonType.Submit">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText Class="button_saveChange_text">Сохранить</MudText>
                                }
                            </MudButton>
                        </div>


                    </div>
                </div>

                <div class="row" style="margin-top:20px;">
                    <div class="history_header" @onclick="(()=>ShowHideHistory())">
                        История изменений
                        <div class="@historyArrowClass"></div>
                    </div>
                    @if (isShowHistory)
                    {
                        <div class="history overflow-auto">
                            @foreach (var oneHistory in history)
                            {
                                <div class="history_row">
                                    <span>@oneHistory.HistoryObject.LastUpdateTime /</span>
                                    <strong>@oneHistory.HistoryObject.UserLastUpdate</strong>
                                    <span>@oneHistory.ChangesToString()</span>
                                </div>

                            }
                        </div>
                    }
                </div>

                <div class="row" style="margin-top:20px;">
                    @if (!string.IsNullOrEmpty(template.Creator))
                    {
                        <div>Создал: @template.Creator</div>
                    }
                    @if (template.CreateTime != null)
                    {
                        <div>Дата создания: @template.CreateTime.Value</div>
                    }

                    @if (!string.IsNullOrEmpty(template.UserLastUpdate))
                    {
                        <div>Изменил: @template.UserLastUpdate</div>
                    }
                    @if (template.LastUpdateTime != null)
                    {
                        <div>Дата последнего изменения: @template.LastUpdateTime.Value</div>
                    }
                </div>

                <Blazored.FluentValidation.FluentValidationValidator></Blazored.FluentValidation.FluentValidationValidator>
            </EditForm>
        </div>

    </div>
}
else
{
    <h4>Шаблон не найден. Возможно он был удален.</h4>
}

@*<div style="width:500px; height:100px; background-color:red;" @onclick="()=>Debug()"></div>*@

@code
{
    //[Parameter]
    //[SupplyParameterFromQuery]
    public bool isShowTechnicalFields { get; set; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string id { get; set; }

    //Вставить во все старые заказы поля из нового шаблона.
    private bool isUpdateOldOrders = false;

    protected override async Task OnInitializedAsync()
    {
        GetDictionaries();
        GetOrderTypes();
        GetSkills();

        if (!string.IsNullOrWhiteSpace(id))
        {
            if (id.Length != 24)
            {
                template = null;
                return;
            }
            Edit(id); //object is null if id wrong
        }
    }

    private bool _processing = false;
    private void ShowNotification(Severity severity, string text)
    {
        Snackbar.Clear();
        Snackbar.Add(text, severity);
    }

    private void CloseWindow()
    {
        NavigationManager.NavigateTo("/templates");
    }

    //public List<FileView> files = new(); !!!
    private Skill selectedSkill = new Skill();
    private IEnumerable<Skill> selectedSkills { get; set; } = new HashSet<Skill>();
    private List<Skill> skills = new List<Skill>();
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Выбрано навыков: {selectedValues.Count}";
    }
    private void GetSkills()
    {
        skills = skillService.GetAll().OrderBy(x => x.Position).ToList();
    }

    private List<Models.DataList> dictionaries;
    private void GetDictionaries()
    {
        dictionaries = dataListService.GetAll();
    }

    OrderTemplate template = new OrderTemplate();
    List<OrderTemplate> templates = new();
    //private void GetTemplates() //DEBUG
    //{
    //    templates = orderTemplateService.GetOrderTemplates();
    //    StateHasChanged();
    //}

    OrderType orderType;
    List<OrderType> orderTypes = new List<OrderType>();
    private void GetOrderTypes()
    {
        orderTypes = orderTypeService.GetAll().OrderBy(x => x.Position).ToList();
    }
    private void ClearOrderType()
    {
        orderType = null;
        template.OrderType = null;
    }

    //История
    private bool isShowHistory = false;
    private string historyArrowClass = "history_arrow_top";
    private void ShowHideHistory()
    {
        isShowHistory = !isShowHistory;
        if (isShowHistory)
        {
            historyArrowClass = "history_arrow_bottom";
        }
        else
        {
            historyArrowClass = "history_arrow_top";
        }

    }
    private List<HistoryModel<OrderTemplate>> history = new();
    private HistoryModel<OrderTemplate> selectedHistory;// = new();
    public void GetHistory()
    {
        try
        {
            history = orderTemplateService.GetTopHistory(template.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine("TemplatePage_GetHistory()_Exception: " + ex.Message);
        }
    }
    //--------------------------
    private string Validation()
    {
        if (string.IsNullOrWhiteSpace(template.OrderTemplateName))
        {
            ShowNotification(Severity.Warning, "Не задано название шаблона");
            return ValidationCode.EmptyName;
        }

        List<TemplateFieldView> allFields = new();
        if (fields != null)
        {
            allFields.AddRange(fields.Where(x => x.TemplateField.Selector == "myselector").ToList());
        }
        if (executorFields != null)
        {
            allFields.AddRange(executorFields.Where(x => x.TemplateField.Selector == "myselector").ToList());
        }

        //var count = allFields.Where(x => string.IsNullOrEmpty(x.TemplateField.FieldName)).Count();
        int count = 0;
        foreach (var field in allFields)
        {
            if (string.IsNullOrWhiteSpace(field.TemplateField.FieldName))
            {
                count++;
            }
            if (field.TemplateField.Type == FieldType.FTList && field.AsDataList.Values == null)
            {
                ShowNotification(Severity.Warning, "Не выбраны значения для списка");
                return ValidationCode.EmptyListValues;
            }
        }
        if (count > 0)
        {
            ShowNotification(Severity.Warning, "Не все поля заполнены");
            return ValidationCode.EmptyFieldsNames;
        }

        return ValidationCode.ValidationSuccess;
    }

    public List<Order>? GetOrdersForUpdate(string templateId)
    {
        var orders = orderService.GetOrdersByTemplateId(templateId);
        if (orders == null || orders.Count() == 0)
            return null;

        foreach (var order in orders)
        {
            if (template.Fields != null)
            {
                var newFields = template.Fields;

                // добавляем отсутствующие поля в заказ
                foreach (var newField in newFields)
                {
                    if (order.Template.Fields == null)
                    {
                        order.Template.Fields = new();
                    }

                    var orderField = order.Template.Fields.FirstOrDefault(x => x.Id == newField.Id);
                    if (orderField == null)
                    {
                        order.Template.Fields.Add(newField);
                    }
                    else
                    {
                        // переименовываем поля, если нужно
                        if (orderField.FieldName != newField.FieldName)
                        {
                            orderField.FieldName = newField.FieldName;
                        }
                    }
                }

                // удаляем поля, которых нет в шаблоне
                foreach (var orderField in order.Template.Fields.ToList())
                {
                    if (!newFields.Any(x => x.Id == orderField.Id))
                    {
                        order.Template.Fields.Remove(orderField);
                    }
                }
            }
            else
            {
                order.Template.Fields = null;
            }

            //Тожесамое для полей исполнителя(мастера)
            if (template.ExecutorFields != null)
            {
                var newExecutorFields = template.ExecutorFields;
                if (order.Template.ExecutorFields == null)
                {
                    order.Template.ExecutorFields = new();
                }
                foreach (var newExecutorField in newExecutorFields)
                {
                    var orderExecutorField = order.Template.ExecutorFields.FirstOrDefault(x => x.Id == newExecutorField.Id);
                    if (orderExecutorField == null)
                    {
                        order.Template.ExecutorFields.Add(newExecutorField);
                    }
                    else
                    {
                        if (orderExecutorField.FieldName != newExecutorField.FieldName)
                        {
                            orderExecutorField.FieldName = newExecutorField.FieldName;
                        }
                    }
                }

                // удаляем поля, которых нет в шаблоне
                foreach (var orderExecutorField in order.Template.ExecutorFields.ToList())
                {
                    if (!newExecutorFields.Any(x => x.Id == orderExecutorField.Id))
                    {
                        order.Template.ExecutorFields.Remove(orderExecutorField);
                    }
                }
            }
            else
            {
                order.Template.ExecutorFields = null;
            }
        }

        return orders;
    }

    private async Task Save()
    {
        try
        {
            _processing = true; await Task.Delay(1);

            template.Trim();

            if (orderType != null)
            {
                if (!string.IsNullOrWhiteSpace(orderType.TypeName))
                {
                    template.OrderType = orderType.TypeName;
                }
            }

            template.Skills = selectedSkills.ToList();

            //Метод вызывается при создании удалении полей. Но не вызывается при событии drag drop
            ViewListToModelList();

            var validation = Validation();
            if (validation != ValidationCode.ValidationSuccess)
            {
                return;
            }

            var uploadResult = await UploadFiles();
            if (uploadResult == false)
            {
                ShowNotification(Severity.Error, "Не удалось загрузить файлы");
                return;
            }

            //Создал Изменил Дата создания/изменения
            if (string.IsNullOrEmpty(template.Creator))
            {
                template.Creator = authenticationStateTask.Result.User.Identity.Name;
            }
            if (template.CreateTime == null)
            {
                template.CreateTime = DateTime.Now;
            }
            template.UserLastUpdate = authenticationStateTask.Result.User.Identity.Name;
            template.LastUpdateTime = DateTime.Now;
            //

            orderTemplateService.SaveOrUpdate(template);

            //Обновить поля во всех заказах
            if (isUpdateOldOrders)
            {
                //DateTime start = DateTime.Now;
                var orders = GetOrdersForUpdate(template.Id);
                if (orders != null)
                {
                    orderService.UpdateOrdersTemplate(orders);
                }
                //DateTime end = DateTime.Now;
                //var result = end - start;
                //Console.WriteLine(end);
                //Console.WriteLine(result);
            }


            //Создать Стандартный формат для шаблона
            var settingsOrder = new Order(template);
            var mainFields = new Views.MainFields(settingsOrder).Fields;
            List<TemplateFieldGridView> fields = new();
            List<TemplateFieldGridView> executorfields = new();
            if (template.Fields != null && template.Fields.Count > 0)
                foreach (var f in template.Fields)
                {
                    fields.Add(new TemplateFieldGridView(f));
                }
            if (template.ExecutorFields != null && template.ExecutorFields.Count > 0)
                foreach (var f in template.ExecutorFields)
                {
                    executorfields.Add(new TemplateFieldGridView(f));
                }
            var defaultSettings = new GeneralGridSettings(true, template.Id, "Стандартный", mainFields, fields, executorfields);
            generalGridSettingsService.DeleteDefaultSettings(template.Id);
            generalGridSettingsService.SaveOrUpdate(defaultSettings);
            //-----------------------------------------

            ShowNotification(Severity.Success, "Шаблон сохранен");
            //Reset();
        }
        catch (MongoDB.Driver.MongoWriteException ex)
        {
            if (ex.WriteError.Category == MongoDB.Driver.ServerErrorCategory.DuplicateKey)
            {
                ShowNotification(Severity.Warning, "Шаблон с таким названием уже существует");
            }
            return;
        }
        catch (Exception ex)
        {
            ShowNotification(Severity.Error, "Ошибка сохранения данных");
            Console.WriteLine("Save_Exception: " + ex.Message);
            return;
        }
        finally
        {
            _processing = false;
            fields = fields.OrderBy(x => x.Position).ToList();
            executorFields = executorFields.OrderBy(x => x.Position).ToList();
            RefreshDropContainer(_fieldsDropContainer, fields);
            RefreshDropContainer(_executoFieldsDropContainer, executorFields);
            StateHasChanged();
        }

    }

    private void Reset()
    {
        template = new OrderTemplate();
        orderType = null;
        selectedSkills = new HashSet<Skill>();
        fields.Clear();
        executorFields.Clear();
        //files.Clear();
        RefreshDropContainer(_fieldsDropContainer, fields);
        RefreshDropContainer(_executoFieldsDropContainer, executorFields);
    }
    private void Edit(string id)
    {
        try
        {
            Reset();
            template = orderTemplateService.GetOne(id);
            if (template == null) { return; }
            if (template.OrderType != null)
            {
                orderType = orderTypes.FirstOrDefault(x => x.TypeName == template.OrderType);
            }

            if (template.Skills != null)
            {
                var templateSkills = new List<Skill>();
                foreach (var templateSkill in template.Skills)
                {
                    //.Where(x=>x!=null).ToList()
                    var skill = skills.First(x => x.Id == templateSkill.Id);//Найти именно скилл из предложенногоСпискаВсехСкилов чтобы проставлялась галочка чекбокса
                    templateSkills.Add(skill);
                }
                selectedSkills = templateSkills;
            }


            if (template.Fields != null)
            {
                var fieldsRaw = template.Fields.OrderBy(x => x.Position).ToList();
                foreach (var field in fieldsRaw)
                {
                    TemplateFieldView fieldView = new(field);
                    fields.Add(fieldView);
                }
            }

            if (template.ExecutorFields != null)
            {
                var executorFieldsRaw = template.ExecutorFields.OrderBy(x => x.Position).ToList();
                foreach (var field in executorFieldsRaw)
                {
                    TemplateFieldView fieldView = new(field);
                    executorFields.Add(fieldView);
                }
            }


            RefreshDropContainer(_fieldsDropContainer, fields);
            RefreshDropContainer(_executoFieldsDropContainer, executorFields);
        }
        catch (Exception ex)
        {
            Console.WriteLine("TemplatePage_Edit: " + ex.Message);
        }
    }
    private async void OpenDialogDelete(string id, string name)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Dialog>("Удалить " + name + "?", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var delResult = Delete(id);
            if (delResult == true)
            {
                CloseWindow();
            }
            else { ShowNotification(Severity.Error, "Ошибка удаления данных"); }
        }

    }
    private bool Delete(string id)
    {
        var result = orderTemplateService.Delete(id);
        Reset();
        if (result > 0)
            return true;
        else
            return false;
    }


    private MudDropContainer<TemplateFieldView> _fieldsDropContainer;
    private MudDropContainer<TemplateFieldView> _executoFieldsDropContainer;
    List<TemplateFieldView> fields = new();
    List<TemplateFieldView> executorFields = new();
    private void FieldUpdated(MudItemDropInfo<TemplateFieldView> dropItem)
    {
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2" => fields.Count(x => x.TemplateField.Selector == "myselector"),
            _ => 0,
        };
        fields.UpdateOrder(dropItem, item => item.Position, indexOffset);
    }
    private void ExecutorFieldUpdated(MudItemDropInfo<TemplateFieldView> dropItem)
    {
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2" => executorFields.Count(x => x.TemplateField.Selector == "myselector"),
            _ => 0,
        };
        executorFields.UpdateOrder(dropItem, item => item.Position, indexOffset);
    }
    private void RefreshDropContainer(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list)
    {
        if (container != null)
        {
            container.Items = list;
            container.Refresh();
        }
    }
    private void DeleteField(string fieldId, MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list)
    {
        var item = list.Find(x => x.TemplateField.Id == fieldId);
        item.TemplateField.Selector = "deleted";//скрыть
                                                //!СделатьПересчетПозиций

        list = list.OrderBy(x => x.Position).ToList();
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void ViewListToModelList()
    {
        List<TemplateField> templateFields = new();
        List<TemplateField> templateExecutorFields = new();
        foreach (var field in fields.Where(x => x.TemplateField.Selector == "myselector"))
        {
            TemplateField templateField = field.GetTemplateField();
            templateFields.Add(templateField);
        }
        foreach (var field in executorFields.Where(x => x.TemplateField.Selector == "myselector"))
        {
            TemplateField templateField = field.GetTemplateField();
            templateExecutorFields.Add(templateField);
        }

        if (templateFields.Count > 0)
        {
            template.Fields = templateFields;
        }
        else { template.Fields = null; }

        if (templateExecutorFields.Count > 0)
        {
            template.ExecutorFields = templateExecutorFields;
        }
        else { template.ExecutorFields = null; }
    }

    //ДобавлениеПолейЗаказа
    //
    private void AddTextField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        TextField newField = new("", string.Empty, owner);

        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }

        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();

        RefreshDropContainer(container, list);
    }

    private void AddFileField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        FileField newField = new("", string.Empty, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }
    private async Task<bool>/*<System.Net.HttpStatusCode>*/ UploadFiles()
    {
        try
        {
            List<TemplateFieldView> fileFields = new();
            if (fields != null)
            {
                fileFields.AddRange(fields.Where(x => x.AsFiles != null && x.AsFiles.Count > 0).ToList());
            }
            if (executorFields != null)
            {
                fileFields.AddRange(executorFields.Where(x => x.AsFiles != null && x.AsFiles.Count > 0).ToList());
            }

            //using var content = new MultipartFormDataContent();
            //List<string> fileNames = new();
            foreach (var field in fileFields)
            {
                foreach (FileView file in field.AsFiles)
                {
                    if (file.browserFile != null)
                    {

                        string path = Path.Combine(Utils.UploadPath.UploadDir, file.TFile.Name);
                        await using FileStream fs = new(path, FileMode.Create);
                        var tt = file.browserFile.OpenReadStream(Utils.UploadPath.MAX_FILE_SIZE);
                        await tt.CopyToAsync(fs);
                        //set full path
                        file.TFile.FullPath = Path.Combine(Utils.UploadPath.UploadUrl, file.TFile.Name);

                        /*
                        var browserFile = file.browserFile;
                        var tt = browserFile.OpenReadStream(Utils.UploadPath.MAX_FILE_SIZE);
                        var fileContent = new StreamContent(tt);
                        fileContent.Headers.ContentType = new MediaTypeHeaderValue(browserFile.ContentType);
                        fileNames.Add(browserFile.Name);
                        content.Add(content: fileContent, name: "\"files\"", fileName: browserFile.Name);
                    */
                    }
                }
            }
            //var response = await httpclient.PostAsync("/api/Upload/UploadFiles", content);
            //return response.StatusCode;

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            //Console.Beep(2000, 200);
            return false;
        }

    }
    private void DeleteFile(TemplateFieldView context, string filename, MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list)
    {
        context.DeleteFile(filename);
        //context.AsFiles.Re

        RefreshDropContainer(container, list);
    }

    private async void SetUploadedFileNames(InputFileChangeEventArgs e, TemplateFieldView context, MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list)
    {
        try
        {
            if (context.AsFiles != null)
            {
                context.AsFiles.Clear();
            }
            else
            {
                context.AsFiles = new();
            }


            var items = e.GetMultipleFiles().ToArray();
            foreach (var item in items)
            {
                if (item.Size > Utils.UploadPath.MAX_FILE_SIZE)
                {
                    ShowNotification(Severity.Warning, "Размер файла должен быть не больше " + ((Utils.UploadPath.MAX_FILE_SIZE / 1024) / 1024) + "МБ");
                    return;
                }
            }

            context.AddFiles(items);

            RefreshDropContainer(container, list);
        }
        catch (Exception ex)
        {
            ShowNotification(Severity.Warning, "Ошибка загрузки файлов");
            Console.WriteLine("SetUploadedFileNames: " + ex.Message);
        }
    }

    private void AddLinkField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        LinkField newField = new("", string.Empty, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddRubleField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        RubleField newField = new RubleField("", 0.0, owner);

        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddDoubleField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        DoubleField newField = new("", 0.0, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddIntField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        LongField newField = new("", 0, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddDateField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        DateField newField = new("", new DateTime(), owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddDateTimeField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        DateTimeField newField = new("", new DateTime(), owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddPhotoField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        PhotoField newField = new("", string.Empty, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddYesNoField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        YesNoField newField = new("", false, owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }

    private void AddListField(MudDropContainer<TemplateFieldView> container, List<TemplateFieldView> list, string owner)
    {
        ListField newField = new("", new Models.DataList(), owner);
        if (list.Count() > 0)
        {
            newField.Position = list[list.Count - 1].TemplateField.Position + 1;
        }
        var view = new TemplateFieldView(newField);
        view.TemplateField = newField;
        list.Add(view);

        //Сделать передачу из View-Списка в cписок для модели
        ViewListToModelList();
        RefreshDropContainer(container, list);
    }
}