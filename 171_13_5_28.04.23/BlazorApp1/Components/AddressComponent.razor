@using BlazorApp1.Models;
@inject Services.DaDataService dadataService
@inject Services.GeoapifyService timezoneService
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
<div class="address">

    <div class="row">
        <div class="region_filter_info">
            <div class="yesno_f01">Ввод вручную <MudSwitch Class="m0p0" @bind-Checked="@address.IsAutogen" Color="MudBlazor.Color.Primary" />Ввод автоматически</div>
        </div>
    </div>

    <div class="row">

        @if (address.IsAutogen == true)
        {
            <div class="col-md-12">
                <label class="input_label">Адрес:</label>
                <MudGrid>
                    <MudItem xs="12">
                        <MudAutocomplete Variant="Variant.Outlined" Margin=MudBlazor.Margin.Dense T="DaData.Models.Suggestions.Results.AddressResult" Clearable="true" OnClearButtonClick="ClearAddress" Style="margin-bottom: 10px;"
                                     @bind-Value="addressResult"
                                     TextUpdateSuppression="false"
                                     SearchFunc="@SearchAddress"
                                     ToStringFunc="@(e=> e==null?null : $"{e.UnrestrictedValue}")" />
                    </MudItem>
                </MudGrid>
            </div>
        }
        else
        {
            <div class="col-12 block_form">
                <label class="input_label">Полный адрес(заполняется при вводе автоматически):</label>
                <input class="form_input_plnd" @bind="address.FullAddress" @onblur="(e=>SetUnrestrictedValue())" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Страна:</label>
                <input class="form_input_plnd" @bind="address.Country" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Область/Регион:</label>
                <input class="form_input_plnd" @bind="address.StateProvince" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Город:</label>
                <input class="form_input_plnd" @bind="address.City" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Район:</label>
                <input class="form_input_plnd" @bind="address.Area" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Населенный пункт(село поселок деревня микрорайон):</label>
                <input class="form_input_plnd" @bind="address.Settlement" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Улица:</label>
                <input class="form_input_plnd" @bind="address.Street" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Дом:</label>
                <input class="form_input_plnd" @bind="address.House" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Почтовый индекс:</label>
                <input class="form_input_plnd" @bind="address.PostalCode" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Широта(Lat):</label>
                <input class="form_input_plnd" @bind="address.Lat" style="width:100%;" />
            </div>
            <div class="col-12 block_form">
                <label class="input_label">Долгота(Lon):</label>
                <input class="form_input_plnd" @bind="address.Lon" style="width:100%;" />
            </div>
        }

    </div>

    <div class="row block_form">
        <div class="col-md-4">
            <label class="input_label" style="white-space: nowrap; text-overflow: ellipsis;">Кв/офис:</label>
            <input class="form_input_plnd" @bind="address.Apartments" style="width:100%;" />
        </div>
        <div class="col-md-4">
            <label class="input_label">Этаж:</label>
            <input class="form_input_plnd" @bind="address.Floor" style="width:100%;" />
        </div>
        <div class="col-md-4">
            <label class="input_label">Подъезд:</label>
            <input class="form_input_plnd" @bind="address.Entrance" style="width:100%;" />
        </div>
    </div>
    <div class="row block_form">
        <div class="col-md-12">
            <label class="input_label">Описание адреса:</label>
            <textarea class="form_input_plnd" rows="1" @bind="address.Description" style="width:100%;"></textarea>
        </div>
    </div>

</div>

@code 
{
    //Для заполнения при переключения с ручного на автоматический
    private void SetUnrestrictedValue()
    {
        _addressResult.UnrestrictedValue = address.FullAddress;
    }

    private Address _address = new();

    [Parameter]
    public Address? address 
    {
        get
        {
            return _address;
        }
        set
        {
            if (value != null)
            {
                _address = value;
                _addressResult.UnrestrictedValue = address.FullAddress;
            }
            else
            {
                _addressResult = new();
            }
        }

    }

    private DaData.Models.Suggestions.Results.AddressResult _addressResult = new();
    private DaData.Models.Suggestions.Results.AddressResult addressResult
    {
        get
        {
            return _addressResult;
        }
        set
        {
            _addressResult = value;
            _address.SetDaDataValues(_addressResult);

            //////Получить таймЗону
            ////DaData.Models.Suggestions.Results.AddressResult tt = response.Suggestions[0];
            //var timezoneName = await timezoneService.GetTimeZone(_address.Lat, _address.Lon);
            //Console.WriteLine(timezoneName.Result);
            TT();
        }
    }

    async Task TT()
    {
        //////Получить таймЗону
        //DaData.Models.Suggestions.Results.AddressResult tt = response.Suggestions[0];
        var timezoneName = await timezoneService.GetTimeZone(_address.Lat, _address.Lon);
        Console.WriteLine(timezoneName);
    }

    private async Task<IEnumerable<DaData.Models.Suggestions.Results.AddressResult>> SearchAddress(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return null;
        }

        var response = await dadataService.GetAddress(value);

        return response.Suggestions;
    }
    private void ClearAddress()
    {
        address = new Address();
        addressResult = new();
    }
}
