@page "/order_old"
@attribute [Authorize(Policy = "RequireRole")]
@using BlazorApp1.Components;
@using BlazorApp1.Models
@using BlazorApp1.Models.Mobile;
@using BlazorApp1.Models.Mobile.Responses;
@using BlazorApp1.Models.Validation;
@using BlazorApp1.Services
@using BlazorApp1.Views
@using MudBlazor.Utilities
@inject ILoggerFactory LoggerFactory
@inject Services.EmployeeService employeeService
@inject Services.ClientService clientService
@inject Services.SkillService skillService
@inject RegionService regionService
@inject Services.OrderTypeService orderTypeService
@inject Services.OrderTemplateService orderTemplateService
@inject DataListService dataListService
@inject Services.OrderService orderService
@inject Services.DaDataService dadataService
@inject IDialogService DialogService

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@inject Services.RabbitMQService rabbit

@if (order != null)
{
    <div class="row">
        <div class="col-10 d-none d-sm-block col-xxl-6">
            <div class="row p-2 my_form_header">
                <div class="col-6">
                    <h4>
                        @if (string.IsNullOrWhiteSpace(id))
                        {
                            <span>Новый заказ</span>
                        }
                        else
                        {
                            <span>Заказ</span>
                        }
                    </h4>
                </div>
                <div class="col-6" @onclick="@(e=>CloseWindow())">
                    <div class="x_icon"></div>
                </div>
            </div>
        </div>
        <div class="w-100" />
        <div class="col-10 d-none d-sm-block col-xxl-6 my_form">

            <div class="row">

                @if (!string.IsNullOrWhiteSpace(id))
                {
                    <div class="order_status">@order.Order.OrderStatus.StatusName</div>

                    <div class="order_status">
                        <MudSelect @bind-Value="order.Order.OrderStatus"
                           T="OrderStatus"
                           Margin=MudBlazor.Margin.Dense
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                            @foreach (var status in statuses)
                            {
                                <MudSelectItem Value="@status">@status.StatusName</MudSelectItem>
                            }
                        </MudSelect>
                    </div>

                    @if ((bool)order.Order.IsReadByExecutor)
                    {
                        <div class="read_by_executor">Прочитано исполнителем</div>
                    }
                    else
                    {
                        <div class="not_read_by_executor">Не прочитано исполнителем</div>
                    }
                }

                @*<div class="col-md-12">
            <label>Название Заказа*:</label>
            <input class="form_input_plnd" @bind="order.Order.OrderName" style="width:100%;" placeholder="" />
            </div>*@
            </div>

            <div class="row">
                <div class="col-md-12">
                    <label>Тип заказа:</label>

                    <MudSelect @bind-Value="orderType" T="OrderType" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="- Без типа -"
                           Clearable="true" OnClearButtonClick="ClearOrderType">
                        @foreach (var type in orderTypes)
                        {
                            <MudSelectItem Value="@type">@type.TypeName</MudSelectItem>
                        }
                    </MudSelect>

                </div>
            </div>

            <div class="row" style="margin-top: 10px;">
                <div class="col-md-12">
                    <label>Описание:</label>
                    <textarea class="form-control" @bind="orderTemplate.OrderDescription" rows="3"></textarea>
                </div>
            </div>


            <div class="row">
                <div class="col-md-12">

                    <div class="row">
                        <div class="col-md-6">
                            <label>Клиент:</label>
                        </div>
                        <div class="col-md-6 top103">
                            <a href="/clients">
                                <div class="get_client_info">
                                    Новый клиент
                                </div>
                            </a>
                        </div>
                    </div>

                    <MudGrid>
                        <MudItem xs="12">
                            <MudAutocomplete Variant="Variant.Outlined" Margin=MudBlazor.Margin.Dense T="Client" Clearable="true" OnClearButtonClick="ClearClient"
                                         @bind-Value="currentClient"
                                         SearchFunc="@SearchClient"
                                         ToStringFunc="@(e=> e==null?null : $"{e.GetFullName()}")" />
                        </MudItem>
                    </MudGrid>

                    <div class="get_client_info" @onclick="(e=> GetInfoFromCurrentClient() )">
                        Получить адрес и контакты
                    </div>

                </div>
            </div>

            <div class="address" style="margin-top:10px;">

                <div class="row">
                    <div class="col-md-12">
                        <label>Адрес*:</label>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudAutocomplete Variant="Variant.Outlined" Margin=MudBlazor.Margin.Dense T="DaData.Models.Suggestions.Results.AddressResult" Clearable="true" OnClearButtonClick="ClearAddress"
                                             @bind-Value="addressResult"
                                             TextUpdateSuppression="false"
                                             SearchFunc="@SearchAddress"
                                             ToStringFunc="@(e=> e==null?null : $"{e.UnrestrictedValue}")" />
                            </MudItem>
                        </MudGrid>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Квартира/офис:</label>
                        <input class="form_input_plnd" @bind="address.Apartments" style="width:100%;" />
                    </div>
                    <div class="col-md-4">
                        <label>Этаж:</label>
                        <input class="form_input_plnd" @bind="address.Floor" style="width:100%;" />
                    </div>
                    <div class="col-md-4">
                        <label>Подъезд:</label>
                        <input class="form_input_plnd" @bind="address.Entrance" style="width:100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <label>Описание адреса:</label>
                        <textarea class="form-control" rows="3" @bind="address.Description" style="width:100%;"></textarea>
                    </div>
                </div>

            </div>

            <div class="contacts" style="margin-top:20px;">

                @foreach (var contact in contacts)
                {
                    <div class="row">
                        <div class="col-md-3">
                            <label>Имя</label>
                            <input class="form_input_plnd" @bind="contact.ClientContactName" style="width:100%;" placeholder="" />
                        </div>
                        <div class="col-md-3">
                            <label>Телефон</label>
                            <RadzenMask Mask="+* (***) ***-****"
                                CharacterPattern="[0-9]"
                                Placeholder="+7 (000) 000-0000"
                                @bind-Value=@contact.Phone
                                Style="width: 100%;"
                                class="form_input_plnd" />
                        </div>
                        <div class="col-md-4">
                            <label>Почта</label>
                            <input class="form_input_plnd" @bind="contact.Mail" style="width:100%;" placeholder="" />
                        </div>

                        @if (contacts.Count() > 0 && contact.IsMain == false)
                        {
                            <div class="col-md-2">
                                <br>
                                <button class="btn btn_skill_delete" @onclick="(e => DeleteContact(contact))">
                                    <div class="trashicon"></div>
                                </button>
                            </div>
                        }


                    </div>
                }
                <button class="btn btn-primary" @onclick="AddContact">Добавить контакт</button>

            </div>


            <div class="row" style="margin-top: 20px; margin-bottom: 10px;">
                <div class="col-md-12">
                    <label>Необходимые навыки:</label>
                    <MudSelect T="Skill" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="true" SelectAll="true" SelectAllText="Выбрать все"
                           @bind-Value="@selectedSkill"
                           @bind-SelectedValues="selectedSkills"
                           MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                        @foreach (var skill in skills)
                        {
                            <MudSelectItem T="Skill" Value="@skill">@skill.SkillName</MudSelectItem>
                        }
                    </MudSelect>

                    @if(selectedSkills != null && selectedSkills.ToList().Count > 0)
                    {
                        <div class="myflexwrap">
                            @foreach (var skill in selectedSkills.ToList())
                            {
                                <span class="skill">@skill.SkillName</span>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <label class="input_t01text">Запланирован на:</label>
                    <MudDatePicker Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" Editable="false" @bind-Date="order.PlannedDate" Mask="@(new DateMask("00.00.0000"))" DateFormat="dd.MM.yyyy" />
                </div>
                <div class="col-md-3">
                    <label></label>
                    <MudTimePicker Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" Editable="false" @bind-Time="order.Order.PlannedTime" />
                </div>
                <div class="col-md-3">
                    <label>Длительность:</label>
                    <MudNumericField Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" @bind-Value="orderTemplate.DurationHour" Label="Часов" Min="0" Max="168" />
                </div>
                <div class="col-md-3">
                    <label></label>
                    <MudNumericField Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" @bind-Value="orderTemplate.DurationMinute" Label="Минут" Min="0" Max="59" Step="5" />
                </div>
            </div>


            <div class="row regions">
                <div class="col-md-12">
                    <label>Регион:</label>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudAutocomplete Variant="Variant.Outlined" Margin=MudBlazor.Margin.Dense T="Region" Clearable="true" OnClearButtonClick="ClearRegion"
                                         @bind-Value="selectedRegion"
                                         SearchFunc="@SearchRegion"
                                         ToStringFunc="@(e=> e==null?null : $"{e.RegionName}")" />
                        </MudItem>
                    </MudGrid>

                    <div class="get_client_info" @onclick="(e=> ClearAllRegionValues() )">
                        <div class="yesno_f01">Очистить все</div>
                    </div>
                </div>
                <div class="col-md-12">
                    @if (selectedRegion.Values != null)
                    {
                        <MudSelect T="RegionValue" Label="Территория обслуживания (Районы):" MultiSelection="true"
                           @bind-Value="@selectedRegionValue"
                           @bind-SelectedValues="@selectedRegionValues">

                            @if (selectedRegion.Values != null)
                                @foreach (var district in selectedRegion.Values)
                                {
                                    <MudSelectItem T="RegionValue" Value="@district">@district.Value</MudSelectItem>
                                }
                        </MudSelect>
                    }
                    @foreach (var regionValue in selectedRegionValues)
                    {
                        <div>@regionValue.RegionName  @regionValue.Value</div>
                    }

                </div>
            </div>
            <div class="region_filter_info">
                <div class="yesno_f01">Без фильтра <MudSwitch Class="m0p0" @bind-Checked="@filterEmployeesByRegion" Color="Color.Primary" />Фильтр по регионам</div>
            </div>


            <div class="row">
                <div class="col-md-12">
                    <label>Исполнитель(ответственный):</label>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudAutocomplete Variant="Variant.Outlined" Margin=MudBlazor.Margin.Dense T="Employee" Clearable="true" OnClearButtonClick="ClearExecutor"
                                         @bind-Value="currentExecutor"
                                         SearchFunc="@SearchExecutor"
                                         ToStringFunc="@(e=> e==null?null : $"{e.GetFullName() + e.CalculateSkillMatching(GetEmployeeSkills(e),selectedSkills.ToList())+ e.CalculateRegionMatching(GetEmployeeRegionValues(e),selectedRegionValues.ToList())}")" />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            @*            <div class="row" style="margin-top: 10px; margin-bottom: 10px;">
        <div class="col-md-12">
        Исполнитель Бригада
        </div>
        </div>*@

            @if (order.Fields != null && order.Fields.Count > 0)
            {
                @foreach (var field in order.Fields)
                {
                    <div class="row">
                        <div class="col-md-12">
                            <label>@field.TemplateField.FieldName:</label>
                            @switch (field.TemplateField.Type)
                            {
                                case FieldType.FTText:
                                    <input class="form_input_plnd" @bind="field.AsString" style="width:100%;" />
                                    break;
                                case FieldType.FTFile:
                                    <div class="row">
                                        <div class="col-12">
                                            <InputFile id="@field.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, field, false))" hidden />
                                            <MudButton HtmlTag="label" Class="btn_field_download"
                                   Variant="Variant.Filled"
                                   for="@field.TemplateField.Id">
                                                Выбрать файл
                                            </MudButton>
                                        </div>
                                        <div class="col-12">
                                            @if (field.AsFiles != null && field.AsFiles.Count > 0)
                                            {
                                                @foreach (var file in field.AsFiles)
                                                {
                                                    <div class="row">
                                                        @if (file != null)
                                                        {
                                                            @if (file.browserFile != null) //Добавлен новый
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.browserFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text">@file.browserFile.Name</div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else if (file.TFile != null) //Прочитан из бд
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.TFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text"><a href="@file.TFile.FullPath">@file.TFile.InitialName</a></div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    break;
                                case FieldType.FTLink:
                                    <input class="form_input_plnd" @bind="field.AsString" style="width:100%;" />
                                    break;
                                case FieldType.FTList:
                                    @if (field.AsDataList != null && field.AsDataList.Values != null)
                                    {
                                        @if(field.AsDataList.IsSingleSelection)
                                        {
                                            <MudSelect T="DataValue" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="false"
                                            @bind-Value="@field.AsDataList.SelectedSingleValue"
                                            MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                                                @foreach (var item in field.AsDataList.Values)
                                                {
                                                    <MudSelectItem T="DataValue" Value="@item">@item.Value</MudSelectItem>
                                                }
                                            </MudSelect>                                             
                                        }
                                        else
                                        {
                                           <MudSelect T="DataValue" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="true" SelectAll="true" SelectAllText="Выбрать все"
                                            @bind-SelectedValues="@field.AsDataList.SelectedValues"
                                            MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                                                @foreach (var item in field.AsDataList.Values)
                                                {
                                                    <MudSelectItem T="DataValue" Value="@item">@item.Value</MudSelectItem>
                                                }
                                            </MudSelect> 
                                        }
                                    }
                                    break;
                                case FieldType.FTRuble:
                                case FieldType.FTDouble:
                                    <input class="form_input_plnd" @bind="field.AsDouble" style="width:100%;" />
                                    break;
                                case FieldType.FTLong:
                                    <input class="form_input_plnd" @bind="field.AsLong" style="width:100%;" />
                                    break;
                                case FieldType.FTDate:
                                    <MudDatePicker @bind-Date="field.AsDateTime" Mask="@(new DateMask("00.00.0000"))" DateFormat="dd-MM-yyyy" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                    break;
                                case FieldType.FTDateTime:
                                    <div class="row">
                                        <div class="col-6">
                                            <MudDatePicker @bind-Date="field.AsDateTime" Mask="@(new DateMask("00.00.0000"))" DateFormat="dd-MM-yyyy" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                        </div>
                                        <div class="col-6">
                                            <MudTimePicker @bind-Time="field.AsTimeSpan" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                        </div>
                                    </div>
                                    break;

                                default:
                                    ShowNotification(Severity.Error, "Неверный тип поля");
                                    break;
                            }

                        </div>
                    </div>
                }
            }

            <h5>Поля исполнителя</h5>
            @if (order.ExecutorFields != null && order.ExecutorFields.Count > 0)
            {
                @foreach (var field in order.ExecutorFields)
                {
                    <div class="row">
                        <div class="col-md-12">
                            <label>@field.TemplateField.FieldName:</label>
                            @switch (field.TemplateField.Type)
                            {
                                case FieldType.FTText:
                                    <input class="form_input_plnd" @bind="field.AsString" style="width:100%;" />
                                    break;
                                case FieldType.FTFile:
                                    <div class="row">
                                        <div class="col-12">
                                            <InputFile id="@field.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, field, false))" hidden />
                                            <MudButton HtmlTag="label" Class="btn_field_download"
                                   Variant="Variant.Filled"
                                   for="@field.TemplateField.Id">
                                                Выбрать файл
                                            </MudButton>
                                        </div>
                                        <div class="col-12">
                                            @if (field.AsFiles != null && field.AsFiles.Count > 0)
                                            {
                                                @foreach (var file in field.AsFiles)
                                                {
                                                    <div class="row">
                                                        @if (file != null)
                                                        {
                                                            @if (file.browserFile != null) //Добавлен новый
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.browserFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text">@file.browserFile.Name</div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else if (file.TFile != null) //Прочитан из бд
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.TFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text"><a href="@file.TFile.FullPath">@file.TFile.InitialName</a></div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    break;
                                case FieldType.FTLink:
                                    <input class="form_input_plnd" @bind="field.AsString" style="width:100%;" />
                                    break;
                                case FieldType.FTList:
                                     @if (field.AsDataList != null && field.AsDataList.Values != null)
                                    {
                                        @if(field.AsDataList.IsSingleSelection)
                                        {
                                            <MudSelect T="DataValue" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="false"
                                            @bind-Value="@field.AsDataList.SelectedSingleValue"
                                            MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                                                @foreach (var item in field.AsDataList.Values)
                                                {
                                                    <MudSelectItem T="DataValue" Value="@item">@item.Value</MudSelectItem>
                                                }
                                            </MudSelect>                                             
                                        }
                                        else
                                        {
                                           <MudSelect T="DataValue" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" MultiSelection="true" SelectAll="true" SelectAllText="Выбрать все"
                                            @bind-SelectedValues="@field.AsDataList.SelectedValues"
                                            MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                                                @foreach (var item in field.AsDataList.Values)
                                                {
                                                    <MudSelectItem T="DataValue" Value="@item">@item.Value</MudSelectItem>
                                                }
                                            </MudSelect> 
                                        }
                                    }
                                    break;
                                case FieldType.FTRuble:
                                case FieldType.FTDouble:
                                    <input class="form_input_plnd" @bind="field.AsDouble" style="width:100%;" />
                                    break;
                                case FieldType.FTLong:
                                    <input class="form_input_plnd" @bind="field.AsLong" style="width:100%;" />
                                    break;
                                case FieldType.FTDate:
                                    <MudDatePicker @bind-Date="field.AsDateTime" Mask="@(new DateMask("00.00.0000"))" DateFormat="dd-MM-yyyy" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                    break;
                                case FieldType.FTDateTime:
                                    <div class="row">
                                        <div class="col-6">
                                            <MudDatePicker @bind-Date="field.AsDateTime" Mask="@(new DateMask("00.00.0000"))" DateFormat="dd-MM-yyyy" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                        </div>
                                        <div class="col-6">
                                            <MudTimePicker @bind-Time="field.AsTimeSpan" Editable="false" Margin=MudBlazor.Margin.Dense Variant="Variant.Outlined" />
                                        </div>
                                    </div>
                                    break;
                                case FieldType.FTPhoto:
                                    <div class="row">
                                        <div class="col-12">
                                            <InputFile id="@field.TemplateField.Id" OnChange="(e => SetUploadedFileNames(e, field, true))" hidden multiple accept="image/*" />
                                            <MudButton HtmlTag="label" Class="btn_field_download"
                                   Variant="Variant.Filled"
                                   for="@field.TemplateField.Id">
                                                Выбрать фото
                                            </MudButton>
                                        </div>
                                        <div class="col-12">
                                            @if (field.AsFiles != null && field.AsFiles.Count > 0)
                                            {
                                                @foreach (var file in field.AsFiles)
                                                {
                                                    <div class="row">
                                                        @if (file != null)
                                                        {
                                                            @if (file.browserFile != null) //Добавлен новый
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.browserFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text">@file.browserFile.Name</div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else if (file.TFile != null) //Прочитан из бд
                                                            {
                                                                <div class="col-12">
                                                                    <div class="row">
                                                                        <div class="col-4 input_t01text inp_fp">(@file.TFile.Size байт)</div>
                                                                        <div class="col-6 input_t01text"><a href="@file.TFile.FullPath">@file.TFile.InitialName</a></div>
                                                                        <div class="col-2 input_t01text"><div class="x_icon_mini" @onclick="(e=> DeleteFile(field, file.TFile.Name))"></div></div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    break;
                                case FieldType.FTYesNo:
                                    <div class="yesno_f01">Нет <MudSwitch Class="m0p0" @bind-Checked="@field.AsBool" Color="Color.Primary" />Да</div>
                                    break;

                                default:
                                    ShowNotification(Severity.Error, "Неверный тип поля");
                                    break;
                            }

                        </div>
                    </div>
                }
            }

            @if (id != null)
            {
                <div class="row" style="margin-top:20px;">
                    <MudCheckBox @bind-Checked="@isNotifyExecutor" Label="Уведомить исполнителя" Color="Color.Primary" Class="m0p0"></MudCheckBox>
                </div>
            }

            <div class="row" style="margin-top:20px;">
                @if (!string.IsNullOrEmpty(order.Order.Creator))
                {
                    <div>Создал: @order.Order.Creator</div>
                }
                @if (order.Order.CreateTime != null)
                {
                    <div>Дата создания: @order.Order.CreateTime.Value.ToLocalTime()</div>
                }

                @if (!string.IsNullOrEmpty(order.Order.UserLastUpdate))
                {
                    <div>Изменил: @order.Order.UserLastUpdate</div>
                }
                @if (order.Order.LastUpdateTime != null)
                {
                    <div>Дата последнего изменения: @order.Order.LastUpdateTime.Value.ToLocalTime()</div>
                }
            </div>

            <div class="row" style="margin-top:20px;">
                <div class="col-md-12">

                    @if (id != null)
                    {
                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Error" OnClick="@(e=>OpenDialogDelete(order.Order.Id, order.Order.OrderName))">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Удалить</MudText>
                            }
                        </MudButton>
                    }

                    <div style="float: right;">
                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Default" OnClick="@(e=>CloseWindow())">
                            <MudText>Отменить</MudText>
                        </MudButton>
                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(e=>Save())">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Сохранить</MudText>
                            }
                        </MudButton>
                    </div>


                </div>
            </div>

        </div>

    </div>
}
else
{
    <h5>Заказ не найден. Возможно он был удален.</h5>
}


@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public bool filterEmployeesByRegion = false;//Фильтровать сотрудников по регионам

    [Parameter]
    [SupplyParameterFromQuery]
    public string id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string template { get; set; } //id

    public OrderView order;
    OrderTemplate orderTemplate;
    private void GetOrderTemplate(string id)
    {
        orderTemplate = orderTemplateService.GetOne(id);
    }

    public bool isNotifyExecutor = true;

    protected override async Task OnInitializedAsync()
    {
        GetDictionaries();
        GetOrderTypes();
        GetAllEmployees();
        GetSkills();
        ////GetExecutors();

        ////GetOrdersByExecutorId();//DEBUG



        if (!string.IsNullOrWhiteSpace(id) && id.Length == 24)
        {
            Edit(id); //GetOrderTemplate(template); будет получен внутри
        }
        else
        {
            //new
            if (!string.IsNullOrWhiteSpace(template) && template.Length == 24)
            {
                New();
            }
            else
            {
                ShowNotification(Severity.Error, "ШАБЛОН НЕ ПЕРЕДАН");
                Console.Beep(3000, 100);
            }
        }
    }



    private void CloseWindow()
    {
        NavigationManager.NavigateTo("/orders");
    }

    //СТАТУСЫ
    //private OrderStatus selectedStatus = OrderStatus.NEW;
    private List<OrderStatus> statuses = OrderStatus.statuses;

    //РЕГИОНЫ
    private Region selectedRegion = new Region();
    private async Task<IEnumerable<Region>> SearchRegion(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            //return null;
            return regionService.GetAll().Where(x => !string.IsNullOrEmpty(x.RegionName)).Take(20);
        }

        var response = regionService.GetAll();
        var match = response.FindAll(x => !string.IsNullOrEmpty(x.RegionName) && x.RegionName.ToLower().Contains(value.ToLower()));

        return match;
    }

    private List<Region> regions = new List<Region>();
    private void GetRegions()
    {
        regions = regionService.GetAll().ToList();
    }
    //Значения выбранных регионов
    //@bind-Value="@selectedRegion"
    //@bind-SelectedValues="selectedRegions"
    private RegionValue selectedRegionValue = new();
    private IEnumerable<RegionValue> selectedRegionValues { get; set; } = new HashSet<RegionValue>();
    private string GetMultiSelectionTextRegionValues(List<string> selectedValues)
    {
        return $"Выбрано районов: {selectedValues.Count}";
    }
    public void ClearRegion()
    {
        selectedRegion = new Region();
    }
    private void ClearAllRegionValues()
    {
        selectedRegion = new Region();
        selectedRegionValues = new HashSet<RegionValue>();
    }
    //
    //

    private Skill selectedSkill = new Skill();
    private IEnumerable<Skill> selectedSkills { get; set; } = new HashSet<Skill>();
    private List<Skill> skills = new List<Skill>();
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Выбрано: {selectedValues.Count}";
    }
    private void GetSkills()
    {
        skills = skillService.GetAll().OrderBy(x => x.Position).ToList();
    }
    public List<Skill> GetEmployeeSkills(Employee employee)
    {
        //List<string> ids = employee.Skills;
        //List<Skill> employeeSkills = new();
        //foreach (var skill in skills)
        //{
        //    if (ids.Contains(skill.Id))
        //    {
        //        employeeSkills.Add(skill);
        //    }
        //}
        return employee.Skills;
    }
    public List<RegionValue>? GetEmployeeRegionValues(Employee employee)
    {
        return employee.Regions;
    }


    private List<Models.DataList> dictionaries;
    private void GetDictionaries()
    {
        dictionaries = dataListService.GetAll();
    }

    private OrderType orderType;
    private List<OrderType> orderTypes = new List<OrderType>();
    private void GetOrderTypes()
    {
        orderTypes = orderTypeService.GetAll().OrderBy(x => x.Position).ToList();
    }
    private void ClearOrderType()
    {
        orderType = null;
    }

    private Client currentClient;//выбранный клиент
    private async Task<IEnumerable<Client>> SearchClient(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            //return null;
            return clientService.GetAll().Where(x => x.GetFullName() != null).Take(20);
        }

        var response = clientService.GetAll();
        var match = response.FindAll(x => x.GetFullName() != null && x.GetFullName().ToLower().Contains(value.ToLower()));

        return match;
    }
    private void ClearClient()
    {
        currentClient = null;// new();
    }


    //Получить Адреса и Контакты из Клиента
    private async Task GetInfoFromCurrentClient()
    {
        try
        {
            if (currentClient == null)
            {
                ShowNotification(Severity.Warning, "Клиент не установлен");
                return;
            }

            currentClient = clientService.GetOne(currentClient.Id);
            if (currentClient.Address != null)
            {
                address = currentClient.Address;
                addressResult.UnrestrictedValue = address.FullAddress;
            }
            if (currentClient.Contacts != null)
            {
                contacts = currentClient.Contacts;
                if (currentClient.ClientType.TypeId == "Physical" && currentClient.ClientPhone != null)
                {
                    contacts.All(x => x.IsMain = false);
                    contacts.Insert(0, new ClientContact(currentClient.GetFullName(), currentClient.ClientPhone, currentClient.ClientMail, true));
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowNotification(Severity.Warning, "Невозможно получить данные");
            return;
        }
    }

    private List<ClientContact> contacts = new List<ClientContact>() { new ClientContact(true) };
    private void AddContact()
    {
        contacts.Add(new ClientContact());
    }
    private void DeleteContact(ClientContact contact)
    {
        contacts.Remove(contact);
    }

    private Address address = new Address();
    private DaData.Models.Suggestions.Results.AddressResult addressResult = new();
    private async Task<IEnumerable<DaData.Models.Suggestions.Results.AddressResult>> SearchAddress(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return null;
        }

        var response = await dadataService.GetAddress(value);

        return response.Suggestions;
    }
    private void ClearAddress()
    {
        address = new Address();
        addressResult = new();
    }

    public List<Employee> allEmployees = new();
    public void GetAllEmployees()
    {
        allEmployees = employeeService.GetAll().Where(x => x.GetFullName() != null && x.IsActive == true).ToList();
    }
    private List<Employee> FilterEmployee(List<Employee> inputEmployees)
    {
        HashSet<Employee> returnEmployees = new();
        foreach (var employee in inputEmployees)
        {
            if (employee.Regions != null)
            {
                foreach (var employeeRegionValue in employee.Regions)
                {
                    foreach (var regionValue in selectedRegionValues.ToList())
                    {
                        if (employeeRegionValue.Equals(regionValue))
                        {
                            returnEmployees.Add(employee);
                        }
                    }
                }
            }
        }
        return returnEmployees.ToList();
    }
    private Employee currentExecutor;//выбранный исполнитель (ответственный)
    private async Task<IEnumerable<Employee>> SearchExecutor(string value)
    {

        if (string.IsNullOrWhiteSpace(value))
        {
            var employees = allEmployees.Take(20);
            if (filterEmployeesByRegion == true)
                employees = FilterEmployee(employees.ToList());

            return employees;
        }

        var match = allEmployees.FindAll(x => x.GetFullName() != null && x.GetFullName().ToLower().Contains(value.ToLower()));
        if (filterEmployeesByRegion == true)
            match = FilterEmployee(match);

        return match;
    }
    private void ClearExecutor()
    {
        currentExecutor = null;//new();
    }

    private async Task<string> Validation()
    {
        //!Название Заказа не нужно
        //if (string.IsNullOrWhiteSpace(order.Order.OrderName))
        //{
        //    ShowNotification(Severity.Warning, "Не задано название заказа");
        //    return Utils.ValidationCode.EmptyName;
        //}

        List<TemplateFieldView> allFields = new();
        if (order.Fields != null)
        {
            allFields.AddRange(order.Fields.Where(x => x.TemplateField.Selector == "myselector").ToList());
        }
        if (order.ExecutorFields != null)
        {
            allFields.AddRange(order.ExecutorFields.Where(x => x.TemplateField.Selector == "myselector").ToList());
        }

        //У диспетчер пока нет обязательных полей. Все опциональные
        ////Проверить чтобы у всех полей где должно быть обязательное значение были заполнены
        //int countRequired = 0;
        int count0 = 0; //количество числовых полей со значением 0
        foreach (var field in allFields)
        {
            ////Проверка обязательных
            //if (field.TemplateField.Required == true && field.TemplateField._value == null)
            //{
            //    countRequired++;
            //}

            //Проверка числовых на null и 0
            if (field.TemplateField.Type.Equals("FTLong") || field.TemplateField.Type.Equals("FTRuble") || field.TemplateField.Type.Equals("FTDouble"))
            {
                if (field.TemplateField._value == null)
                {
                    count0++;
                }
                if (field.TemplateField.Type.Equals("FTRuble") || field.TemplateField.Type.Equals("FTDouble"))
                {
                    if (field.AsDouble == null || field.AsDouble == 0)
                    {
                        count0++;
                    }
                }
                if (field.TemplateField.Type.Equals("FTLong"))
                {
                    if (field.AsLong == null || field.AsLong == 0)
                    {
                        count0++;
                    }
                }
            }

        }

        if (count0 > 0)
        {
            //ShowNotification(Severity.Warning, "В числовые поля установлено значение 0");
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var dialog = DialogService.Show<Dialog>("Числовые поля не заполнены или установлено значение: 0. Продолжить создание заказа?", options);

            var result = await dialog.Result;
            if (result.Cancelled)
            {
                ShowNotification(Severity.Info, "Создание заказа приостанавлено");
                return ValidationCode.EmptyFieldsValues;
            }

        }
        //if (countRequired > 0)
        //{
        //    ShowNotification(Severity.Warning, "Не все обязательные поля заполнены");
        //    return Utils.ValidationCode.EmptyFieldsValues;
        //}


        return ValidationCode.ValidationSuccess;
    }

    private async void New()
    {
        GetOrderTemplate(template);
        if (orderTemplate != null)
        {
            order = new OrderView(new Order(orderTemplate));

            //Навыки
            selectedSkills = orderTemplate.Skills;

            //Тип заказа
            if (orderTemplate.OrderType != null) //В Родительском шаблоне
            {
                orderType = orderTypes.FirstOrDefault(x => x.TypeName == orderTemplate.OrderType);
            }
        }
        else
        {
            ShowNotification(Severity.Error, "ШАБЛОН НЕ ПЕРЕДАН");
            Console.Beep(1000, 100);
        }
    }
    private async void Save()
    {
        try
        {
            _processing = true; await Task.Delay(1);

            order.SaveOrderFields();

            if (orderType != null && !string.IsNullOrWhiteSpace(orderType.Id))
            {
                order.Order.Template.OrderType = orderType.TypeName;
            }

            //List<string> skillIds = selectedSkills.Where(x => x != null).Select(x => x.Id).ToList();
            ////if (skillIds.Count > 0)
            //{
            //    orderTemplate.Skills = skillIds;
            //}
            orderTemplate.Skills = selectedSkills.ToList();

            order.Order.Client = currentClient;

            //Адрес
            address.SetDaDataValues(addressResult);
            order.Order.Address = address;

            //Контакты
            order.Order.Contacts = contacts;
            if (contacts.Count == 1 && string.IsNullOrWhiteSpace(contacts[0].Phone) && string.IsNullOrWhiteSpace(contacts[0].ClientContactName) && contacts[0].IsMain == true)
            {
                order.Order.Contacts = null;
            }

            //РЕГИОНЫ(Районы)
            if (selectedRegionValues != null && selectedRegionValues.ToList().Count > 0)
            {
                order.Order.Regions = selectedRegionValues.ToList();
            }
            else { order.Order.Regions = null; }

            //Исполнитель
            bool isNotifyOldExecutor = false;
            Employee? oldExecutor = order.Order.OrderEmployeeExecutor; //прежний исполнитель
            if (currentExecutor != null && oldExecutor != null && !oldExecutor.Id.Equals(currentExecutor.Id))
                isNotifyOldExecutor = true;

            order.Order.OrderEmployeeExecutor = currentExecutor;

            var validation = await Validation();
            if (validation != ValidationCode.ValidationSuccess)
            {
                return;
            }

            var uploadResult = await UploadFiles();
            if (uploadResult == false)
            {
                ShowNotification(Severity.Error, "Не удалось загрузить файлы");
                return;
            }

            //Нумерация
            string currentPrefix = DateTime.Now.Year.ToString();
            if (order.Order.OrderNum == null)
            {
                order.Order.OrderNum = orderService.GetAll().Max(x => x.OrderNum) + 1;
                //order.Order.OrderNum = orderService.GetAll().Where(x => x.OrderNumPrefix.Equals(currentPrefix)).Max(x => x.OrderNum) + 1; Каждый Год обнуление счетчика
                if (order.Order.OrderNum == null) { order.Order.OrderNum = 0; }
            }
            if (string.IsNullOrWhiteSpace(order.Order.OrderName))
            {
                order.Order.OrderName = currentPrefix + "_" + order.Order.OrderNum;
            }

            //Создал Изменил Дата создания/изменения
            if (string.IsNullOrEmpty(order.Order.Creator))
            {
                order.Order.Creator = authenticationStateTask.Result.User.Identity.Name;
            }
            if (order.Order.CreateTime == null)
            {
                order.Order.CreateTime = DateTime.Now;
            }
            order.Order.UserLastUpdate = authenticationStateTask.Result.User.Identity.Name;
            order.Order.LastUpdateTime = DateTime.Now;
            //

            ////Если ДИспетечеруразрешено будет менять статус
            //if(order.Order.OrderStatus.Equals(OrderStatus.NEW))
            //{
            //    order.Order.RoadTimeStart = null;
            //    order.Order.RoadTimeStop = null;
            //    order.Order.StartTime = null;
            //    order.Order.StopTime = null;
            //}

            if (isNotifyExecutor) //снять прочитано исполнителем если стоит уведомить исполнителя==true
            {
                order.Order.IsReadByExecutor = false;
            }
            orderService.SaveOrUpdate(order.Order);

            if (isNotifyExecutor && order.Order.OrderEmployeeExecutor != null) //уведомить исполнителя
            {
                string title = string.Empty;
                if (order.Order.OrderStatus.Equals(OrderStatus.NEW))
                {
                    title = "Новая заявка";
                }
                else { title = "Заявка изменена"; }

                await rabbit.SendMessageToQueues("", order.Order.OrderEmployeeExecutor.Id,
                new OrderDataMessage(orderId: order.Order.Id,
                    orderName: order.Order.OrderName, statusName:
                    order.Order.OrderStatus.StatusName, eventName: "",
                    title: title));
            }

            //Уведомить Прежнего Исполнителя(Всегда уведомлять)
            if (isNotifyOldExecutor == true)
            {
                await rabbit.SendMessageToQueues("", oldExecutor.Id,
                new OrderDataMessage(orderId: order.Order.Id,
                    orderName: order.Order.OrderName, statusName:
                    order.Order.OrderStatus.StatusName, eventName: "",
                    title: "Заявка была назначена другому исполнителю"));
            }

            ShowNotification(Severity.Success, "Заказ сохранен");
        }
        catch (Exception ex)
        {
            ShowNotification(Severity.Error, "Ошибка сохранения данных");
            Console.WriteLine("Save_Exception: " + ex.Message);
            return;
        }
        finally
        {
            _processing = false;
            //RefreshDropContainer(_fieldsDropContainer, Fields);
            //RefreshDropContainer(_executoFieldsDropContainer, ExecutorFields);
            StateHasChanged();
        }
    }

    private void Reset()
    {
        /*
        template = new OrderTemplate();
        orderType = null;
        selectedSkills = new HashSet<Skill>();
        Fields.Clear();
        ExecutorFields.Clear();
        //files.Clear();
        //RefreshDropContainer(_fieldsDropContainer, Fields);
        //RefreshDropContainer(_executoFieldsDropContainer, ExecutorFields);
    */
    }
    private void Edit(string id)
    {
        Reset();
        order = new OrderView(orderService.GetOne(id));
        if (order == null) { return; }
        if (order.Order == null) { order = null; return; }

        orderTemplate = order.Order.Template;
        if (orderTemplate == null)
        {
            ShowNotification(Severity.Warning, "Не удалось загрузить шаблон");
            return;
        }
        template = orderTemplate.Id;

        //Тип Заказа
        if (orderTemplate.OrderType != null)
        {
            orderType = orderTypes.First(x => x.TypeName == orderTemplate.OrderType);
        }

        //КЛИЕНТ
        if (order.Order.Client != null)
        {
            currentClient = order.Order.Client;
        }

        //АДРЕС
        if (order.Order.Address != null)
        {
            address = order.Order.Address;
            addressResult.UnrestrictedValue = address.FullAddress;
        }
        //КОНТАКТЫ
        if (order.Order.Contacts != null)
        {
            contacts = order.Order.Contacts;
        }

        //ИСПОЛНИТЕЛИ
        if (order.Order.OrderEmployeeExecutor != null)
        {
            currentExecutor = order.Order.OrderEmployeeExecutor;
        }

        //Навыки
        if (orderTemplate.Skills != null)
        {
            selectedSkills = orderTemplate.Skills;
        }

        //Регионы
        if (order.Order.Regions != null && order.Order.Regions.Count > 0)
        {
            selectedRegionValues = order.Order.Regions;
        }

        if (order.Fields != null)
        {
            order.Fields.Clear();
            if (order.Order.Template.Fields != null)
            {
                var fieldsRaw = orderTemplate.Fields.OrderBy(x => x.Position).ToList();
                foreach (var field in fieldsRaw)
                {
                    TemplateFieldView fieldView = new(field);
                    order.Fields.Add(fieldView);
                }
            }
        }

        if (order.ExecutorFields != null)
        {
            order.ExecutorFields.Clear();
            if (orderTemplate.ExecutorFields != null)
            {
                var executorFieldsRaw = orderTemplate.ExecutorFields.OrderBy(x => x.Position).ToList();
                foreach (var field in executorFieldsRaw)
                {
                    TemplateFieldView fieldView = new(field);
                    order.ExecutorFields.Add(fieldView);
                }
            }
        }

        //Если статус Завершено Отклонено Отменено или Удалено( Убрать галочку уведомить исполнителя )
        if (order.Order.OrderStatus.Equals(OrderStatus.COMPLETED) || order.Order.OrderStatus.Equals(OrderStatus.REJECTED) || order.Order.OrderStatus.Equals(OrderStatus.CANCELED) || order.Order.OrderStatus.Equals(OrderStatus.DELETED))
            isNotifyExecutor = false;

        ////RefreshDropContainer(_fieldsDropContainer, Fields);
        ////RefreshDropContainer(_executoFieldsDropContainer, ExecutorFields);
    }

    private async void OpenDialogDelete(string id, string name)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Dialog>("Удалить " + name + "?", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var delResult = await Delete(id);
            if (delResult == true)
            {
                CloseWindow();
            }
            else { ShowNotification(Severity.Error, "Ошибка удаления данных"); }
        }

    }
    private async Task<bool> Delete(string id)
    {
        try
        {
            //save order info
            Order order = orderService.GetOne(id);
            string orderId = order.Id;
            string orderName = order.OrderName;
            string statusName = OrderStatus.DELETED.StatusName;
            string executorId = string.Empty;
            if (order.OrderEmployeeExecutor != null)
                executorId = order.OrderEmployeeExecutor.Id;

            long result = orderService.Delete(id);
            Reset();

            if (result > 0)
            {
                if (order.OrderStatus.Equals(OrderStatus.NEW)
                || order.OrderStatus.Equals(OrderStatus.ACCEPTED)
                || order.OrderStatus.Equals(OrderStatus.INROAD)
                || order.OrderStatus.Equals(OrderStatus.ACTIVE)
                || order.OrderStatus.Equals(OrderStatus.SUSPENDED)
                || order.OrderStatus.Equals(OrderStatus.CHANGED))
                {
                    if (!string.IsNullOrEmpty(orderId)) //уведомить исполнителя
                    {
                        await rabbit.SendMessageToQueues("", orderId,
                        new OrderDataMessage(orderId: orderId, orderName: orderName, statusName: statusName, eventName: "", title: "Заявка" + orderName + " удалена"));
                    }
                }

                return true;
            }
            else { return false; }
        }
        catch (Exception ex)
        {
            Console.WriteLine("OrderPage=>Delete() Error: " + ex.Message);
            return false;
        }

    }

    private async Task<bool> UploadFiles()
    {
        try
        {
            List<TemplateFieldView> fileFields = new();
            if (order.Fields != null)
            {
                fileFields.AddRange(order.Fields.Where(x => x.AsFiles != null && x.AsFiles.Count > 0).ToList());
            }
            if (order.ExecutorFields != null)
            {
                fileFields.AddRange(order.ExecutorFields.Where(x => x.AsFiles != null && x.AsFiles.Count > 0).ToList());
            }

            foreach (var field in fileFields)
            {
                foreach (FileView file in field.AsFiles)
                {
                    if (file.browserFile != null)
                    {

                        string path = Path.Combine(Utils.UploadPath.UploadDir, file.TFile.Name);
                        await using FileStream fs = new(path, FileMode.Create);
                        var tt = file.browserFile.OpenReadStream(Utils.UploadPath.MAX_FILE_SIZE);
                        await tt.CopyToAsync(fs);
                        //set full path
                        file.TFile.FullPath = Path.Combine(Utils.UploadPath.UploadUrl, file.TFile.Name);

                    }
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.Beep(2000, 200);
            return false;
        }

    }
    private void DeleteFile(TemplateFieldView context, string filename)
    {
        context.DeleteFile(filename);
    }

    private async void SetUploadedFileNames(InputFileChangeEventArgs e, TemplateFieldView context, bool onlyImages)
    {
        try
        {
            //ClearOldValues
            context.AsFiles.Clear();

            var items = e.GetMultipleFiles().ToArray();
            foreach (var item in items)
            {
                if (item.Size > Utils.UploadPath.MAX_FILE_SIZE)
                {
                    ShowNotification(Severity.Warning, "Размер файла должен быть не больше " + ((Utils.UploadPath.MAX_FILE_SIZE / 1024) / 1024) + "МБ");
                    return;
                }

                if (onlyImages == true && Utils.UploadPath.IsImage(item.Name) == false)
                {
                    ShowNotification(Severity.Warning, "Разрешены только изображения");
                    return;
                }
            }

            context.AddFiles(items);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowNotification(Severity.Warning, "Ошибка загрузки файлов");
            Console.WriteLine("SetUploadedFileNames: " + ex.Message);
        }
    }





    private void ShowNotification(Severity severity, string text)
    {
        Snackbar.Clear();
        Snackbar.Add(text, severity);
    }

    private bool _processing = false;



}

