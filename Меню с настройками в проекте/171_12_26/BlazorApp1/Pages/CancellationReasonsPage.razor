@page "/cancellation_reasons"
@attribute [Authorize(Policy = "RequireRole")]

@using BlazorApp1.Components
@using BlazorApp1.Models
@using BlazorApp1.Models.Validation;
@using BlazorApp1.Services
@using Blazored.Modal
@using Blazored.Modal.Services

@using Blazored.Toast.Configuration
@inject CancellationReasonService cancellationReasonService
@inject IToastService toastService
@inject ILoggerFactory LoggerFactory

@inject ISnackbar Snackbar

@using MudBlazor.Utilities

<div class="row">

	@*	<div class="col-12">
	<h5 class="page_header_text"> Причины отмены</h5>
	</div>*@

	<div class="col-12 col-lg-10 col-md-10 col-sm-10 col-xs-10 types_of_body">
		<MudDropContainer @ref="_dropContainer" T="CancellationReason" Items="cancellationReasons" ItemsSelector="@((item,dropzone) => item.Selector == "myselector")" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1" ItemIsDisabled="@( (item) => true)">
			<ChildContent>
				<MudPaper Class=" flex-grow-1">
					<MudList Clickable="false" Class="d-flex flex-column mud-height-full">
						<MudDropZone T="CancellationReason" Identifier="1" Class="justify-center align-center flex-grow-1 widt" AllowReorder="true" />
						<div class="row" style="margin-bottom:10px">
							<div class="col-12">
								<div class="add_to_changeVal_btn">
									<button @onclick="@(e => AddReason())" class="type_btn_group" Title="Add">
										<div class="button_add_value"></div>
										<span class="text_button_add_value">Добавить причину </span>
									</button>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-12 ">
								<div class="save_cancel_group_btn">
									<MudButton Disabled="@_processing" Class="button_discardChange" OnClick="@(e=>Reset())">
										<MudText Class="button_discardChange_text">Отмена</MudText>
									</MudButton>
									<MudButton Disabled="@_processing" Class="button_saveChange" OnClick="@(e=>Save())">
										@if (_processing)
										{
											<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
											<MudText Class="ms-2">Сохраняется</MudText>
										}
										else
										{
											<MudText Class="button_saveChange_text">Сохранить</MudText>
										}
									</MudButton>
								</div>
							</div>
						</div>
					</MudList>
				</MudPaper>
			</ChildContent>
			<ItemRenderer>
				<div class="row align-items-center row_space_between">
					<div class="col-1 col-xxl-1 col-xl-1 col-lg-2 col-md-2 col-sm-2" draggable="true">
						<button class="dragdrop_button"></button>
					</div>

					<div class="col-8 col-xxl-10 col-xl-10 col-lg-8 col-md-8 col-sm-8">
						<input class="form_input_Value z_101" @bind="@context.ReasonName" style="width:100%;" placeholder="" />
					</div>

					<div class="col-3 col-xxl-1 col-xl-1 col-lg-2 col-md-2 col-sm-2" style="text-align:right">
						<button class="button_Value_delete" @onclick="(e => Delete(context.Id))">
						</button>
					</div>
				</div>
			</ItemRenderer>
		</MudDropContainer>
	</div>
</div>


@code
{
	protected override async Task OnInitializedAsync()
	{
		GetReasons();
	}
	private bool _processing = false;
	private void ShowNotification(Severity severity, string text)
	{
		Snackbar.Clear();
		Snackbar.Add(text, severity);
	}

	private MudDropContainer<CancellationReason> _dropContainer;
	private void ItemUpdated(MudItemDropInfo<CancellationReason> dropItem)
	{
		var indexOffset = dropItem.DropzoneIdentifier switch
		{
			"2" => cancellationReasons.Count(x => x.Selector == "myselector"),
			_ => 0,
		};
		cancellationReasons.UpdateOrder(dropItem, item => item.Position, indexOffset);
	}
	private void Refresh()
	{
		if (_dropContainer != null)
		{
			_dropContainer.Items = cancellationReasons;
			_dropContainer.Refresh();

			////_dropContainer.ItemRenderer.FOCUS()
		}
	}

	private List<CancellationReason> cancellationReasons = new List<CancellationReason>();
	private void GetReasons()
	{
		cancellationReasons = cancellationReasonService.GetAllWithoutDefault().OrderBy(x => x.Position).ToList();
	}
	private void AddReason()
	{
		var reason = new CancellationReason();
		if (cancellationReasons.Count() > 0)
		{
			reason.Position = cancellationReasons[cancellationReasons.Count - 1].Position + 1;
		}
		cancellationReasons.Add(reason);
		Refresh();
	}

	private string Validation()
	{
		foreach (var reason in cancellationReasons.Where(x => x.Selector == "myselector"))
		{
			if (string.IsNullOrWhiteSpace(reason.ReasonName))
			{
				ShowNotification(Severity.Warning, "Не все поля заполнены");//Не все поля заполнены
				return ValidationCode.EmptyFieldsNames;
			}
		}

		return ValidationCode.ValidationSuccess;
	}
	private async void Save()
	{
		try
		{
			_processing = true; await Task.Delay(1);

			var validation = Validation();
			if (validation != ValidationCode.ValidationSuccess)
			{
				return;
			}

			foreach (var reason in cancellationReasons)
			{
				if (reason.Selector == "deleted")
				{
					cancellationReasonService.Delete(reason.Id);
				}
				else
				{
					cancellationReasonService.SaveOrUpdate(reason);
				}
			}

			Reset();
			ShowNotification(Severity.Success, "Причины отмены обновлены");
		}
		catch (MongoDB.Driver.MongoWriteException ex)
		{
			if (ex.WriteError.Category == MongoDB.Driver.ServerErrorCategory.DuplicateKey)
			{
				ShowNotification(Severity.Warning, "Дубликаты не допустимы");
			}
			return;
		}
		catch (Exception ex)
		{
			ShowNotification(Severity.Error, "Ошибка сохранения данных");
			Console.WriteLine("Save_Exception: " + ex.Message);
			return;
		}
		finally
		{
			_processing = false;
			Refresh();
			StateHasChanged();
		}
	}
	private void Reset()
	{
		cancellationReasons.Clear();
		GetReasons();
		Refresh();
		StateHasChanged();
	}
	private void Delete(string id)
	{
		var reason = cancellationReasons.Find(x => x.Id == id);
		reason.Selector = "deleted";//скрыть

		//!!!сделать пересчет позиций

		Refresh();
		StateHasChanged();
	}
}
